# SPDX-License-Identifier: MPL-2.0
# Copyright (C) 2018 - 2022 Gemeente Amsterdam, Vereniging van Nederlandse Gemeenten
"""
These tests check the contents of PDFs generated byt the PDFSummaryService.
We do not want to parse PDFs, instead we look at the content of the intermediate
HTML.
"""
from django.test import TestCase
from django.utils import timezone

from signals.apps.services.domain.pdf_summary import PDFSummaryService
from signals.apps.signals import workflow
from signals.apps.signals.factories import (
    CategoryFactory,
    ParentCategoryFactory,
    SignalFactoryWithImage,
    StatusFactory
)
from signals.apps.users.factories import SuperUserFactory


class TestPDFSummaryService(TestCase):
    def setUp(self):
        self.parent_category = ParentCategoryFactory.create(name='PARENT-CATEGORY')
        self.child_category = CategoryFactory.create(name='CHILD-CATEGORY', parent=self.parent_category)

        self.signal = SignalFactoryWithImage.create(
            incident_date_start=timezone.now(),
            category_assignment__category=self.child_category,
            reporter__email='foo@bar.com',
            reporter__phone='0612345678')
        StatusFactory.create(_signal=self.signal, state=workflow.AFWACHTING, text='waiting')
        StatusFactory.create(_signal=self.signal, state=workflow.ON_HOLD, text='please hold')
        status = StatusFactory.create(_signal=self.signal,
                                      state=workflow.AFGEHANDELD,
                                      text='Consider it done')
        self.signal.status = status
        self.signal.save()

        self.user = SuperUserFactory.create()

    def test_trivial(self):
        PDFSummaryService._get_html(self.signal, self.user)

    def test_get_html(self):
        html = PDFSummaryService._get_html(self.signal, self.user)

        # General information about the `Signal` object.
        current_tz = timezone.get_current_timezone()
        self.assertIn(self.signal.get_id_display(), html)
        self.assertIn(self.signal.created_at.astimezone(current_tz).strftime('%d-%m-%Y'), html)
        self.assertIn(self.signal.created_at.astimezone(current_tz).strftime('%H:%M:%S'), html)
        self.assertIn(self.signal.incident_date_start.astimezone(current_tz).strftime('%d-%m-%Y'), html)
        self.assertIn(self.signal.incident_date_start.astimezone(current_tz).strftime('%H:%M:%S'), html)
        self.assertIn(self.signal.get_id_display(), html)
        self.assertIn(self.signal.category_assignment.category.parent.name, html)
        self.assertIn(self.signal.category_assignment.category.name, html)
        self.assertIn(self.signal.priority.get_priority_display(), html)
        self.assertIn(self.signal.text, html)
        self.assertIn(self.signal.location.get_stadsdeel_display(), html)
        self.assertIn(self.signal.location.address_text, html)
        self.assertIn(self.signal.source, html)

        # Reporter information.
        self.assertIn(self.signal.reporter.email, 'foo@bar.com')
        self.assertIn(self.signal.reporter.phone, '0612345678')

        # All status transitions.
        for status in self.signal.statuses.all():
            self.assertIn(status.state, html)
            self.assertIn(status.text, html)
            self.assertIn(status.user, html)

    def test_hide_contact_details(self):
        pass

    def test_show_contact_details(self):
        pass


class TestPDFSummaryServiceWithExtraProperties(TestCase):
    def setUp(self):
        # Note: this test assumes Amsterdam categories being present, hence it being isolated.
        self.extra_properties_data = [
            {
                "id": "extra_straatverlichting",
                "label": "Is de situatie gevaarlijk?",
                "answer": {
                    "id": "niet_gevaarlijk",
                    "label": "Niet gevaarlijk"
                },
                "category_url": "/signals/v1/public/terms/categories/wegen-verkeer-straatmeubilair/sub_categories/lantaarnpaal-straatverlichting"  # noqa
            },
        ]

        self.signal = SignalFactoryWithImage.create(
            extra_properties=self.extra_properties_data,
            category_assignment__category__parent__name='Wegen, verkeer, straatmeubilair',
            category_assignment__category__name='lantaarnpaal straatverlichting'
        )

    def test_extra_properties(self):
        html = PDFSummaryService._get_html(self.signal, None)

        self.assertIn('Is de situatie gevaarlijk?', html)
        self.assertIn('Niet gevaarlijk', html)
