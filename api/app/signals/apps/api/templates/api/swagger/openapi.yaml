openapi: 3.0.0
info:
  title: Signalen Informatievoorziening Amsterdam (SIA) API spec V1"
  description: >-
    One of the tasks of the municipality of Amsterdam is to maintain
    public spaces like roads, parks. When citizens have complaints about public
    spaces they can leave these complaints with the municipality. SIA, the
    Signalen Informatievoorziening Amsterdam, receives these complaints and is
    used to track progress towards their resolution.


    SIA provides an API that is used both by the SIA frontend and external
    systems that integrate with SIA. This swagger file documents that API.
  contact:
    email: "datapunt@amsterdam.nl"
  version: "TBD"
paths:
  /signals/v1/private/signals/:
    get:
      description: Signals list endpoint
      parameters:
        - name: ordering
          in: query
          description: Order the result of this endpoint (ASC or DESC)
          schema:
            type: string
            enum:
              - id
              - -id
              - created_at
              - -created_at
              - updated_at
              - -updated_at
              - stadsdeel
              - -stadsdeel
              - area_name
              - -area_name
              - sub_category
              - -sub_category
              - main_category
              - -main_category
              - status
              - -status
              - priority
              - -priority
              - address
              - -address
              - assigned_user_email
              - -assigned_user_email
          example: created_at
          required: false
        - name: id
          in: query
          description: >-
            Filter Signals on a given id
          schema:
            type: integer
            example: 123456789
          required: false
        - name: address_text
          in: query
          description: >-
            Filter Signals located on a (part) of an address (case insensitive)
          schema:
            type: string
            example: 'Amstel 1'
          required: false
        - name: area_code
          in: query
          description: >-
            Filter signals according to the currently assigned location area_code, accepts
            a single area_code
          schema:
            type: string
            example: 'ASC'
          required: false
        - name: area_type_code
          in: query
          description: >-
            Filter signals according to the currently assigned location area_type_code, accepts
            a single area_type_code
          schema:
            type: string
            example: 'district'
          required: false
        - name: buurt_code
          deprecated: true
          in: query
          description: >-
            Deprecated, will be removed in the near future.

            Filter signals according to the currently assigned location buurt_code
          schema:
            type: string
            example: 'E17a'
          required: false
        - name: category_id
          description: >-
            Filter returns only signals with matching category id(s). This will overrule the use of
            maincategory_slug and/or category_slug.
          in: query
          required: false
          schema:
            type: integer
        - name: category_slug
          description: >-
            If the category_id filter is used this will overwrite the use of the
            maincategory_slug/category_slug filter. Filter returns only signals with matching
            sub category slug.
          in: query
          required: false
          schema:
            type: string
        - name: contact_details
          in: query
          description: >-
            Filter signals according to the presence of contact details, accepts
            (a combination of) the following values `none` for no contact
            details, `phone` for the presence of a reporter's phone number, and
            `email` for the presence of a reporter's email address.
          schema:
            type: string
            enum:
              - none
              - phone
              - email
          required: false
        - name: created_after
          in: query
          description: >-
            Filter returns only signals created after specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: created_before
          in: query
          description: >-
            Filter returns only signals created before specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: directing_department
          in: query
          description: >-
            Filter (parent) signals according to the currently assigned directing department(s),
            accepts (a combination of) the codes of the declared departments. The value "null" will
            select all (parent) signals without a directing department assignment. This means that
            the "is_responsible" department associated with the category is considered the
            "directing department".
          schema:
            type: string
          examples:
            ASC:
              value: 'ASC'
              summary: Will select all (parent) Signals where ASC is set explicitly as the directing department
            null:
              value: 'null'
              summary: Will select all (parent) Signals without a directing department assignment
          required: false
        - name: feedback
          in: query
          description: >-
            Filter Signals/meldingen according to wether feedback was received
            for them. This filter accepts one of the following values:
            `satisfied` (reporter was satisfied with the resolution),
            `not_satisfied` (reporter was not satisfied with the resolution),
            or `not_received` (no feedback was sent by the reporter). Only the
            newest feedback is taken into account.
          required: false
          schema:
            type: string
            enum:
              - satisfied
              - not_satisfied
              - not_received
        - name: has_changed_children
          in: query
          description: >-
            Filters all parent signals that have changes or no changes in children. Accepts true,
            false or both. When both true and false are given only parent Signals are returned.
          required: false
          schema:
            type: boolean
            example:
              true: true
              false: false
        - name: kind
          in: query
          description: >-
            Filter Signals according to whether they are a Signal ("signal"), A parent Signal
            ("parent_signal") and/or a child Signal ("child_signal"). An additional option can be
            used to select all Signals that are NOT a parent Signal, this option is
            "exclude_parent_signal". This filter accepts (a combination of) the options "signal",
            "parent_signal", "exclude_parent_signal" or "child_signal". Parent/Child Signals can
            contain both "split Signals" and/or "Hoofd- en deelmeldingen".
          required: false
          schema:
            type: string
            enum:
              - signal
              - parent_signal
              - exclude_parent_signal
              - child_signal
            example:
              signal:
                value: 'signal'
              parent_signal:
                value: 'parent_signal'
              exclude_parent_signal:
                value: 'exclude_parent_signal'
              child_signal:
                value: 'child_signal'
              combination:
                value: [ 'parent_signal', 'signal' ]
        - name: incident_date
          in: query
          description: >-
            Filter returns only signals with a incident_date at the exact specified date
          schema:
            type: string
            format: date
          required: false
        - name: incident_date_after
          in: query
          description: >-
            Filter returns only signals with a incident_date after the specified date
          schema:
            type: string
            format: date
          required: false
        - name: incident_date_before
          in: query
          description: >-
            Filter returns only signals with a incident_date before the specified date
          schema:
            type: string
            format: date
          required: false
        - name: maincategory_slug
          description: >-
            If the category_id filter is used this will overwrite the use of the
            maincategory_slug/category_slug filter. Filter returns only signals with matching main
            category slug.
          in: query
          required: false
          schema:
            type: string
        - name: note_keyword
          in: query
          description: >-
            This filter option is temporary, and will likely be replaced by
            either proper tagging or extended search using the Elastic Search
            implementation of SIA.
            Filter Signals/meldingen according to the presence of a certain
            keyword in one or more of notes associated with a Signal/melding.
            Accepts one keyword, will check wether it is present and return the
            Signals/meldingen where it is present.
          required: false
          schema:
            type: string
        - name: priority
          in: query
          description: >-
            Filter signals according to their priority, accepts (a combination
            of) the following values: `low`, `high` and/or `normal`.
          required: false
          schema:
            type: string
            enum:
              - low
              - normal
              - high
        - name: source
          in: query
          description: >-
            Filter Signals/meldingen according to their source, accepted values
            are derived from the database. Source `online` are Signals/meldingen
            that were created in the public website.
          required: false
          schema:
            type: string
        - name: stadsdeel
          in: query
          description: Filter signals according to the currently assigned location stadsdeel
          schema:
            type: string
          required: false
        - name: status
          in: query
          description: Filter returns only signals with specified status.
          schema:
            $ref: '#/components/schemas/StatusStateChoices'
          required: false
        - name: 'type'
          in: query
          description: >-
            Filter signals according to the currently assigned type, accepts
            (a combination of) the values `SIG` a "Signal/Melding", `REQ` a "Request/Aanvraag", `QUE` a "QuestionVraag", `COM` a "Complaint/Klacht" and `MAI` a "Maintenance/Groot onderhoud"
          schema:
            type: string
            enum:
              - SIG
              - REQ
              - QUE
              - COM
              - MAI
          required: false
        - name: updated_after
          in: query
          description: >-
            Filter returns only signals updated after specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: updated_before
          in: query
          description: >-
            Filter returns only signals updated before specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: assigned_user_email
          in: query
          description: >-
            !!! Currently not used by Amsterdam !!!
            Filter signals based on the email address of the assigned user.
          required: false
          schema:
            type: string
            format: email
        - name: reporter_email
          in: query
          description: Filter signals based on the email address of its reporter.
          required: false
          schema:
            type: string
            format: email
        - name: routing_department_code
          in: query
          description: >-
            !!! Currently not used by Amsterdam !!!
            Filter signals based on the department code set by the routing mechanism.
          required: false
          schema:
            type: string
        - name: punctuality
          in: query
          description: Filter signals that are being worked on to check that
            they are within allotted time "on_time", late in general "late", or
            late by a factor of three "late_factor_3". This filter accepts only
            one choice. It is also possible to look for Signals that have no
            deadline associated with them using "null" as a value. Signals in
            states "AFGEHANDELD", "GEANNULEERD", or "GESPLITST" will not match.
          required: false
          schema:
            type: string
            enum:
              - "null"
              - "on_time"
              - "late"
              - "late_factor_3"
      responses:
        '200':
          description: List of signals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalListGet'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
      security:
        - OAuth2:
            - SIG/ALL
    post:
      description: Creates a new signal
      requestBody:
        description: Serialized signal data.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/V1PrivateSignalPost'
                - $ref: '#/components/schemas/V1PrivateSignalPostBulk'
      responses:
        '201':
          description: New signal created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/V1PrivateSignalDetailGet'
                  - $ref: '#/components/schemas/V1PrivateSignalDetailGetBulk'
        '400':
          description: Bad request
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/signals/geography:
    get:
      description: Signals geography list endpoint
      parameters:
        - name: "created_before"
          in: query
          description: >-
            Filter returns only signals created before specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: "created_after"
          in: query
          description: >-
            Filter returns only signals created after specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: "updated_before"
          in: query
          description: >-
            Filter returns only signals updated before specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: updated_after
          in: query
          description: >-
            Filter returns only signals updated after specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: status
          in: query
          description: Filter returns only signals with specified status.
          schema:
            $ref: '#/components/schemas/StatusStateChoices'
          required: false
        - name: maincategory_slug
          description: Filter returns only signals with matching main category
            slug.
          in: query
          required: false
          schema:
            type: string
        - name: category_slug
          description: >-
            Filter returns only signals with matching sub category slug.
          in: query
          required: false
          schema:
            type: string
        - name: contact_details
          in: query
          description: >-
            Filter signals according to the presence of contact details, accepts
            (a combination of) the following values `none` for no contact
            details, `phone` for the presence of a reporter's phone number, and
            `email` for the presence of a reporter's email address.
          schema:
            type: string
            enum:
              - none
              - phone
              - email
          required: false
        - name: priority
          in: query
          description: >-
            Filter signals according to their priority, accepts (a combination
            of) the following values: `low`, `high` and/or `normal`.
          required: false
          schema:
            type: string
            enum:
              - low
              - normal
              - high
        - name: feedback
          in: query
          description: >-
            Filter Signals/meldingen according to wether feedback was received
            for them. This filter accepts one of the following values:
            `satisfied` (reporter was satisfied with the resolution),
            `not_satisfied` (reporter was not satisfied with the resolution),
            or `not_received` (no feedback was sent by the reporter). Only the
            newest feedback is taken into account.
          required: false
          schema:
            type: string
            enum:
              - satisfied
              - not_satisfied
              - not_received
        - name: source
          in: query
          description: >-
            Filter Signals/meldingen according to their source, accepted values
            are derived from the database. Source `online` are Signals/meldingen
            that were created in the public website.
          required: false
          schema:
            type: string
        - name: 'type'
          in: query
          description: >-
            Filter signals according to the currently assigned type, accepts
            (a combination of) the values `SIG` a "Signal/Melding", `REQ` a "Request/Aanvraag", `QUE` a "QuestionVraag", `COM` a "Complaint/Klacht" and `MAI` a "Maintenance/Groot onderhoud"
          schema:
            type: string
            enum:
              - SIG
              - REQ
              - QUE
              - COM
              - MAI
          required: false
        - name: note_keyword
          in: query
          description: >-
            This filter option is temporary, and will likely be replaced by
            either proper tagging or extended search using the Elastic Search
            implementation of SIA.
            Filter Signals/meldingen according to the presence of a certain
            keyword in one or more of notes associated with a Signal/melding.
            Accepts one keyword, will check wether it is present and return the
            Signals/meldingen where it is present.
          required: false
          schema:
            type: string

      responses:
        '200':
          description: List of signals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalListGetGeography'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/signals/{id}:
    parameters:
      - name: id
        in: path
        description: ID of signal that is requested
        required: true
        schema:
          type: integer
          example: 1
    get:
      description: Retrieve signal by ID.
      responses:
        '200':
          description: The requested signal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalDetailGet'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
        '404':
          description: Signal not found.
      security:
        - OAuth2:
            - SIG/ALL
    patch:
      description: Partial update to signal.
      requestBody:
        description: JSON data to update signal.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1PrivateSignalPatch'
      responses:
        '200':
          description: The updated signal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalDetailGet'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
        '404':
          description: Signal not found.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/signals/{id}/children/:
    parameters:
      - name: id
        in: path
        description: ID of signal whose child signals are requested
        required: true
        schema:
          type: integer
          example: 1
    get:
      description: Retrieve child signals by parent signal ID.
      responses:
        '200':
          description: Child signals associated with the specified parent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalchildrenGet'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
        '404':
          description: >-
            Parent signal not found or requesting children of a parent signal
            that has no child signals.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/signals/{id}/history:
    parameters:
      - name: id
        in: path
        description: ID of signal whose history needs to be retrieved.
        required: true
        schema:
          type: integer
    get:
      description: History of signal instance with specified ID.
      responses:
        '200':
          description: List of history entries for given signal instance.
        '401':
          description: Not authenticated, may be caused by expired token.
        '404':
          description: Signal not found.
      security:
      - OAuth2:
        - SIG/ALL

  /signals/v1/private/signals/{id}/pdf:
    parameters:
      - name: id
        in: path
        description: ID of signal whose PDF is to be downloaded.
        required: true
        schema:
          type: integer
    get:
      description: Download a PDF summarizing this signals.
      responses:
        '200':
          description: PDF downloaded successfully.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden, user not authorized to request signal PDF.
        '404':
          description: Signal not found.
      security:
      - OAuth2:
        - SIG/ALL

  /signals/v1/private/signals/{id}/attachments/:
    parameters:
      - name: id
        in: path
        description: ID of signal whose attachments are requested.
        required: true
        schema:
          type: integer
    get:
      description: A list of attachments that belong to the Signal
      responses:
        '200':
          description: A list of attachments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalAttachmentsList'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden, user not authorized to request signal attachments.
        '404':
          description: Signal not found.
    post:
      description: Create an attachment for a Signal
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Created an attachment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalAttachmentDetail'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden, user not authorized to request signal attachments.
        '404':
          description: Signal not found.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/signals/{id}/attachments/{attachment_id}:
    parameters:
      - name: id
        in: path
        description: ID of signal whose attachments are requested.
        required: true
        schema:
          type: integer
      - name: attachment_id
        in: path
        description: ID the requested attachment
        required: true
        schema:
          type: integer
    get:
      description: Details for an attachment to a Signal.
      responses:
        '200':
          description: Details for an attachment to a Signal.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalAttachmentDetail'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden, user not authorized to request signal attachments.
        '404':
          description: Signal or attachment not found.
    delete:
      description: Delete attachment
      responses:
        '204':
          description: Successfully deleted the attachment.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden, user not authorized to delete this attachment.
        '404':
          description: Signal or attachment not found.

  /signals/v1/private/signals/{id}/context/:
    parameters:
      - name: id
        in: path
        description: ID of the signal
        required: true
        schema:
          type: integer
    get:
      description: Returns an overview of context related information about a Signal
      responses:
        '200':
          description: Context overview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateContextResponse'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden, user not authorized to request signal context.
        '404':
          description: The endpoint is not available OR no context is available for the given signal
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/signals/{id}/context/reporter/:
    parameters:
      - name: id
        in: path
        description: ID of the signal
        required: true
        schema:
          type: integer
    get:
      description: A detailed overview of context related to the reporter (based on the email address of a reporter)
      responses:
        '200':
          description: Context overview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateContextReporterResponseList'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden, user not authorized to request signal reporter context.
        '404':
          description: The endpoint is not available OR no context is available for the given signal
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/signals/{id}/context/near/geography/:
    parameters:
      - name: id
        in: path
        description: ID of the signal
        required: true
        schema:
          type: integer
    get:
      description: A context overview of Signals near the selected Signal
      responses:
        '200':
          description: Context overview
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateContextNearGeographyResponse'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden, user not authorized to request signal geography context.
        '404':
          description: The endpoint is not available OR no context is available for the given signal
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/signals/{id}/email/preview/:
    parameters:
      - name: id
        in: path
        description: ID of the signal
        required: true
        schema:
          type: integer
    post:
      description: A email preview for the given status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  description: The status a email preview is requested for
                  example: ingepland
                text:
                  description: The status text that must appear in the email preview
                  type: string
      responses:
        '200':
          description: Email preview (subject and html body)
          content:
            application/json:
              schema:
                description: JSON serialization of the email preview subject and html body
                type: object
                properties:
                  subject:
                    type: string
                    description: The subject of the email
                    example: Uw melding SIA-123456789
                  html:
                    type: string
                    description: The rendered body (HTML) of the email
                    example: <!DOCTYPE html><html lang="nl"><head><meta charset="UTF-8"><title>Uw melding SIA-123456789</title></head><body><p>Geachte melder,</p><p>Lorem ipsum...</p><p>Met vriendelijke groet,</p><p>Gemeente Amsterdam</p></body></html>
        '400':
          description: Bad request
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden, user not authorized to request signal geography context.
        '404':
          description: No email preview is found for the given status transition on the selected Signal
      security:
        - OAuth2:
            - SIG/ALL


  /signals/v1/public/signals:
    post:
      description: Create a new Signal/melding.
      requestBody:
        description: Serialized signal data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1PublicSignalPost'
      responses:
        '201':
          description: New signal created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PublicSignalDetailGet'
        '400':
          description: Bad request, see response body for the reason.

  /signals/v1/public/signals/{signal_id}:
    get:
      description: Public data about a Signal/melding.
      parameters:
        - name: signal_id
          in: path
          description: Public identifier for a Signal/melding
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Public data about a Signal/melding.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PublicSignalDetailGet'
        '404':
          description: Signal not found

  /signals/v1/public/signals/{signal_id}/attachments/:
    parameters:
      - name: signal_id
        in: path
        description: Public identifier for a Signal/melding
        required: true
        schema:
          type: string
          format: uuid
    post:
      description: Create an attachment for a Signal
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Created an attachment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalAttachmentDetail'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden, user not authorized to request signal attachments.
        '404':
          description: Signal not found.

  /signals/v1/public/signals/geography:
    get:
      description: Public signals geography endpoint, returns GEOjson. For this endpoint either bbox or lon/lat parameters are required.If both bbox and lon/lat are filled in only the bbox files wil be use.
      parameters:
        - name: bbox
          description: A bounding box to filter. Format is min_lon, min_lat, max_lon, max_lat
          in: query
          required: False
          schema:
            type: string
            example: 4.877157,52.357204,4.929686,52.385239
        - name: lon
          description: A longitude field to filter.
          in: query
          required: False
          schema:
            type: string
            example: 4.877157
        - name: lat
          description: A latitude field to filter.
          in: query
          required: False
          schema:
            type: string
            example: 58.877157
        - name: maincategory_slug
          description: Filter returns only signals with matching main category
            slug.
          in: query
          required: false
          schema:
            type: string
            example: afval
        - name: category_slug
          description: >-
            Filter returns only signals with matching sub category slug.
          in: query
          required: false
          schema:
            type: string
            example: overig-afval
        - name: group_by
          description: >-
            Group the results by (at this moment the only option is 'category')
          in: query
          required: false
          schema:
            type: string
            example: category

      responses:
        '200':
          description: List of signals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PublicSignalGeographyGEOJson'
        '400':
          description: Required query parameters not provided
          content:
            application/json:
              schema:
                description: JSON data describing the public category response
                type: object
                properties:
                  {name_of_query_param}:
                    type: array
                    items:
                      type: string
                example: {'bbox': ['Dit veld is vereist.']}

  /signals/v1/public/terms/categories:
    get:
      description: Categories known to SIA. **May be changed**
      responses:
        '200':
          description: List of all main categories with embedded sub categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicCategoryListResponse'
  /signals/v1/public/feedback/forms/{feedback_token}/:
    get:
      description: Get the feedback details
      parameters:
        - name: feedback_token
          in: path
          description: Feedback token for fetching the form
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: details parameters is present if the form is already filled in.
          content:
            application/json:
              schema:
                type: object
                properties:
                  details:
                    type: string
                    example: filled out
    patch:
      description: Update the feedback form
      parameters:
        - name: feedback_token
          in: path
          description: Feedback token for fetching the form
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: JSON data to update signal
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/publicFeedbackForm'
      responses:
        '200':
          description: Update the feedback model
          content:
            aplication/json:
              schema:
                type: object
                properties:
                  signal_id:
                    type: string
                    format: uuid

  /signals/v1/public/terms/categories/{main_slug}:
    get:
      description: >-
        Information about a specific main category and its sub categories.
        **May be changed**
      responses:
        '200':
          description: Detailed information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicCategoryParentResponse'
      parameters:
        - name: main_slug
          in: path
          description: Slug that identifies the main category.
          required: true
          schema:
            type: string

  /signals/v1/public/terms/categories/{main_slug}/sub_categories/{sub_slug}:
    get:
      description: Information about a specific sub category.  **May be changed**
      responses:
        '200':
          description: Detailed information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/publicCategoryChildResponse'
      parameters:
        - name: main_slug
          in: path
          description: Slug that identifies the main category.
          required: true
          schema:
            type: string
        - name: sub_slug
          in: path
          description: Slug that identifies the sub category.
          required: true
          schema:
            type: string

  /signals/user/auth/me:
    get:
      description: Information about the currently authenticated user.
      responses:
        '200':
          description: User information including permissions.
        '401':
          description: Not authenticated, may be caused by expired token.
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/signals/category/removed:
    get:
      description: >-
        Signals that dropped from a certain category are listed here.
        **URL may be changed**
      parameters:
        - name: after
          in: query
          description: Timestamp after which dropped signals are to found.
          schema:
            type: string
        - name: before
          in: query
          description: Timestamp before which dropped signals are to found.
          schema:
            type: string
        - name: category_slug
          in: query
          description: Slug for the category.
          schema:
            type: string
      responses:
        '200':
          description: List of droppen Signal instances.
      security:
      - OAuth2:
        - SIG/ALL

  /signals/v1/private/signals/promoted/parent:
    get:
      description: >-
        Signals that became a Parent are listed here.
        **URL may be changed**
      parameters:
        - name: after
          in: query
          description: Timestamp after which promoted signals are to be found.
          schema:
            type: string
      responses:
        '200':
          description: List of Signal ID's.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/categories/:
    get:
      description: List of all categories available in the system
      responses:
        '200':
          description: List of all categories available in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateCategoryListResponse'
      security:
        - OAuth2:
          - SIG/ALL
    post:
      description: Creation of categories is not allowed
      responses:
        '405':
          description: Method not allowed
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/categories/{id}:
    parameters:
      - name: id
        in: path
        description: ID of category
        required: true
        schema:
          type: integer
    get:
      description: Retrieves the category matching the given id
      responses:
        '200':
          description: Details of the category matching the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateCategoryResponse'
        '401':
          description: Not authenticated, may be caused by expired token
        '404':
          description: Category not found
      security:
        - OAuth2:
          - SIG/ALL
    patch:
      description: >-
        Will update the following items on a category
          * name
          * is_active
          * description
          * slo (A new slo will be added to the sla list)
          * public_name
          * is_public_accessible
      responses:
        '200':
          description: Changes are made, returns the current state of the category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateCategoryResponse'
        '400':
          description: >-
            Bad request.
        '401':
          description: Not authenticated, may be caused by expired token
        '404':
          description: Category not found
      requestBody:
        description: JSON data to update signal
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privateCategoryPatch'
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/terms/categories/{main_slug}/status-message-templates/:
    parameters:
      - name: main_slug
        in: path
        description: Slug that identifies the main category.
        required: true
        schema:
          type: string
    get:
      description: List of all status message templates for the selected category per state
      responses:
        '200':
          description: List of all categories available in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateCategoryStatusMessageTemplatesResponse'
      security:
        - OAuth2:
          - SIG/ALL
    post:
      description: Create/Update all status message templates for the selected category per state
      requestBody:
        description: Serialized new user data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privateCategoryStatusMessageTemplatesRequest'
      responses:
        '201':
          description: Status message templates created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateCategoryStatusMessageTemplatesResponse'
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/terms/categories/{main_slug}/sub_categories/{sub_slug}/status-message-templates/:
    parameters:
      - name: main_slug
        in: path
        description: Slug that identifies the main category.
        required: true
        schema:
          type: string
      - name: sub_slug
        in: path
        description: Slug that identifies the sub category.
        required: true
        schema:
          type: string
    get:
      description: List of all status message templates for the selected category per state
      responses:
        '200':
          description: List of all categories available in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateCategoryStatusMessageTemplatesResponse'
      security:
        - OAuth2:
          - SIG/ALL
    post:
      description: Create/Update all status message templates for the selected category per state
      requestBody:
        description: Serialized new user data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privateCategoryStatusMessageTemplatesRequest'
      responses:
        '201':
          description: Status message templates created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateCategoryStatusMessageTemplatesResponse'
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/csv:
    get:
      description: Retrieve datawarehouse csv dump as zip file if authorised (requires reporting permission)
      responses:
        '200':
          description: zip file containing csv files
        '401':
          description: Not authenticated, may be caused by expired token
        '403':
          description: Not authorized to access this endpoint.
        '404':
          description: If no csv was generated
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/users/:
    get:
      description: Retrieve list of all users.
      parameters:
        - name: "username"
          in: query
          description: Filter by username, allows partial matches
          schema:
            type: string
          required: false
        - name: "is_active"
          in: query
          description: Filter active (true) and inactive (false).
          schema:
            type: string
        - name: "role"
          in: query
          description: Filter users by role, accepts one or more role names.
          schema:
            type: string
        - name: "profile_department_code"
          in: query
          description: Filter users by department, accepts one or more department codes.
          schema:
            type: string
      responses:
        '200':
          description: List of all users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateUserListResponse'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
      security:
        - OAuth2:
          - SIG/ALL
    post:
      description: Create a new user.
      requestBody:
        description: Serialized new user data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userCreate'
      responses:
        '201':
          description: JSON serialization of detailed newly created SIA user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateUserDetailResponse'
        '400':
          description: Bad request. Posted new user data did not validate.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/users/{id}:
    parameters:
      - name: id
        in: path
        description: ID of user
        required: true
        schema:
          type: integer
    get:
      description: Retrieve user by id.
      responses:
        '200':
          description: JSON serialization of detailed SIA user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateUserDetailResponse'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
          - SIG/ALL
    patch:
      description: Partial update of user data.
      responses:
        '200':
          description: User data successfully updated.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/me/:
    get:
      description: Retrieve loggedin user data.
      responses:
        '200':
          description: JSON serialization of detailed SIA loggedin user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateUserDetailResponse'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/me/filters/:
    get:
      description: Retrieve stored signal filters for the loggedin User
      responses:
        '200':
          description: JSON serialization of the stored Signal filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateStoredSignalFilterResponseList'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
            - SIG/ALL
    post:
      description: Creation of a stored Signal filter.
      requestBody:
        description: JSON serialized stored Signal filter data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privateStoredSignalFilterRequest'
      responses:
        '201':
          description: stored Signal filter successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateStoredSignalFilterResponse'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/me/filters/{id}:
    parameters:
      - name: id
        in: path
        description: ID of stored Signal filter
        required: true
        schema:
          type: integer
    get:
      description: Retrieve stored Signal filter
      responses:
        '200':
          description: JSON serialization of the stored Signal filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateStoredSignalFilterResponse'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
            - SIG/ALL
    patch:
      description: Partial update of the stored Signal filter.
      requestBody:
        description: JSON serialized stored Signal filter data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privateStoredSignalFilterRequest'
      responses:
        '200':
          description: stored Signal filter successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateStoredSignalFilterResponse'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
            - SIG/ALL
    delete:
      description: Delete a stored Signal filter.
      responses:
        '410':
          description: stored Signal filter successfully deleted.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/departments/:
    get:
      description: Retrieve list of departments.
      parameters:
        - name: "can_direct"
          in: query
          description: >-
            Filter by can_direct property of a department, `true` if a department
            has the ability to direct a parent Signal/hoofdmelding else `false`.
          schema:
            type: string
          required: false
      responses:
        '200':
          description: List of departments.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateDepartmentListResponse'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
          - SIG/ALL
    post:
      description: Create a department.
      requestBody:
        description: JSON serialized new department data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/departmentCreate'
      responses:
        '200':
          description: Detailed department data after creation.
        '400':
          description: Bad request.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/departments/{id}:
    parameters:
      - name: id
        in: path
        description: ID of department
        required: true
        schema:
          type: integer
    get:
      description: Retrieve detailed data for a department.
      responses:
        '200':
          description: Detailed department data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateDepartmentDetailResponse'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
        '404':
          description: Not Found.
      security:
      - OAuth2:
          - SIG/ALL
    patch:
      description: (Partial) update of department data.
      requestBody:
        description: JSON serialized new department data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/departmentPatch'
      responses:
        '200':
          description: Detailed department data after successful update.
        '400':
          description: Bad request.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
        '404':
          description: Not Found.
      security:
      - OAuth2:
          - SIG/ALL

  /signals/v1/private/expressions/:
    get:
      description: (EXPERIMENTAL) An expression is a simple piece of code such as 'a > 1'. It can be used as a domain specific language for condition evaluation. We could evaluate an condition such as 'location in area' and use the result to perform actions. The expressions are configurable and don't require a developer to add logic. Currently it is being used to dynamically filter signal attributes. But it is generic and can be used on arbitrary objects.
      responses:
        '200':
          description: List of expressions.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
          - SIG/ALL
    post:
      description: Create a expression.
      requestBody:
        description: JSON serialized new expression data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/expressionCreate'
      responses:
        '200':
          description: Detailed expression data after creation.
        '400':
          description: Bad request.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/expressions/context:
    parameters:
      - name: type
        in: query
        description: A context is used to categorized expressions (similar to a type). We could have 'routing' and 'email' contexes. The 'routing' context is used for signal routing for example.
        required: true
        schema:
          type: string
    get:
      description: Retrieve collection of available expression identifiers/types for a context.
      responses:
        '200':
          description: Detailed expression context data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateExpressionContextGet'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
        '404':
          description: Not Found.
      security:
      - OAuth2:
          - SIG/ALL

  /signals/v1/private/expressions/{id}:
    parameters:
      - name: id
        in: path
        description: ID of expression
        required: true
        schema:
          type: integer
    get:
      description: Retrieve detailed data for a expression.
      responses:
        '200':
          description: Detailed department data.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
        '404':
          description: Not Found.
      security:
      - OAuth2:
          - SIG/ALL
    patch:
      description: (Partial) update of expression data.
      requestBody:
        description: JSON serialized new expression data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/expressionPatch'
      responses:
        '200':
          description: Detailed expression data after successful update.
        '400':
          description: Bad request.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
        '404':
          description: Not Found.
      security:
      - OAuth2:
          - SIG/ALL
    delete:
      description: delete expression.
      responses:
        '204':
          description: successful delete.
        '400':
          description: Bad request.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
        '404':
          description: Not Found.
      security:
      - OAuth2:
          - SIG/ALL

  /signals/v1/private/areas/geography/:
    get:
      description: Retrieve a list of areas in the database. Experimental, the content of the response can still be changed
      parameters:
        - name: "code"
          in: query
          description: >-
            Filter returns only areas with a certain code. Can be used to filter on multiple type
            codes. For example the code for stadsdeel centrum van amsterdam "03630000000018"
          schema:
            type: string
            format: string
          required: false
        - name: "type_code"
          in: query
          description: >-
            Filter returns only areas of a certain type. Can be used to filter on multiple type
            codes. For example a "buurt" or a "stadsdeel" or combination of these codes.
          schema:
            type: string
            format: string
          required: false
      responses:
        '200':
          description: List of area data GEOjson
          headers:
            X-Total-Count:
              schema:
                type: integer
                example: 1
              description: The total areas in the database
            Links:
              schema:
                type: string
                example: <http://127.0.0.1:8000/signals/v1/private/areas/?page=2>; rel="self",<http://127.0.0.1:8000/signals/v1/private/areas/?page=3>; rel="next",<http://127.0.0.1:8000/signals/v1/private/areas/>; rel="prev"
              description: The pagination links for GEOjson list endpoints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AreasGEOJsonList'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
        '404':
          description: Not Found.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/public/areas/geography/:
    get:
      description: Retrieve a list of areas in the database. Experimental, the content of the response can still be changed
      parameters:
        - name: "code"
          in: query
          description: >-
            Filter returns only areas with a certain code. Can be used to filter on multiple type
            codes. For example the code for stadsdeel centrum van amsterdam "03630000000018"
          schema:
            type: string
            format: string
          required: false
        - name: "type_code"
          in: query
          description: >-
            Filter returns only areas of a certain type. Can be used to filter on multiple type
            codes. For example a "buurt" or a "stadsdeel" or combination of these codes.
          schema:
            type: string
            format: string
          required: false
      responses:
        '200':
          description: List of area data GEOjson
          headers:
            X-Total-Count:
              schema:
                type: integer
                example: 1
              description: The total areas in the database
            Links:
              schema:
                type: string
                example: <http://127.0.0.1:8000/signals/v1/private/areas/?page=2>; rel="self",<http://127.0.0.1:8000/signals/v1/private/areas/?page=3>; rel="next",<http://127.0.0.1:8000/signals/v1/private/areas/>; rel="prev"
              description: The pagination links for GEOjson list endpoints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AreasGEOJsonList'
        '404':
          description: Not Found.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/areas/:
    get:
      description: Retrieve a list of areas in the database. Experimental, the content of the response can still be changed
      parameters:
        - name: "code"
          in: query
          description: >-
            Filter returns only areas with a certain code. Can be used to filter on multiple type
            codes. For example the code for stadsdeel centrum van amsterdam "03630000000018"
          schema:
            type: string
            format: string
          required: false
        - name: "type_code"
          in: query
          description: >-
            Filter returns only areas of a certain type. Can be used to filter on multiple type
            codes. For example a "buurt" or a "stadsdeel" or combination of these codes.
          schema:
            type: string
            format: string
          required: false
      responses:
        '200':
          description: List of area data json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AreasJsonList'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
        '404':
          description: Not Found.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/public/areas/:
    get:
      description: Retrieve a list of areas in the database. Experimental, the content of the response can still be changed
      parameters:
        - name: "code"
          in: query
          description: >-
            Filter returns only areas with a certain code. Can be used to filter on multiple type
            codes. For example the code for stadsdeel centrum van amsterdam "03630000000018"
          schema:
            type: string
            format: string
          required: false
        - name: "type_code"
          in: query
          description: >-
            Filter returns only areas of a certain type. Can be used to filter on multiple type
            codes. For example a "buurt" or a "stadsdeel" or combination of these codes.
          schema:
            type: string
            format: string
          required: false
      responses:
        '200':
          description: List of area data json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AreasJsonList'
        '404':
          description: Not Found.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/public/questions/:
    get:
      description: Retrieve a list of questions in the database. Experimental, the content of the response can still be changed
      parameters:
        - name: main_slug
          in: query
          description: Slug that identifies the main category. Only questions related to the main category is returned if only the main_slug is provided.
          required: true
          schema:
            type: string
        - name: sub_slug
          in: query
          description: Slug that identifies the sub category. Questions are returned for main_slug and sub_slug (sorted on main_slug.order, sub_slug.order)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of questions data json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1QuestionsJsonList'
        '404':
          description: Not Found.

  /signals/v1/public/standard_answers/:
    get:
      description: Retrieve a list of all standard answers than can be given during a feedback round
      responses:
        '200':
          description: List of questions data json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1StandardAnswersList'
        '404':
          description: Not Found.

  /signals/v1/private/sources/:
    get:
      description: Retrieve a list of signal sources.
      parameters:
        - name: "is_active"
          in: query
          description: Filter by "is_active" flag
          schema:
            type: boolean
          required: false
        - name: "can_be_selected"
          in: query
          description: Filter by "can_be_selected" flag
          schema:
            type: boolean
          required: false
      responses:
        '200':
          description: List of signal sources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1SourceList'
        '404':
          description: Not Found.

  /signals/v1/private/autocomplete/usernames/:
    get:
      description: Retrieve list of usernames filtered on username.
      parameters:
        - name: "username"
          in: query
          description: Filter by username, allows partial matches (must be at least 3 characters long)
          schema:
            type: string
          required: true
      responses:
        '200':
          description: List of usernames.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateUsernameListResponse'
        '400':
           description: Filter username not provided or filter username too short.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/reports/signals/open/:
    get:
      description: >-
        Selects all Signals in a "open" state that have surpassed by a factor 3 of the deadline.

        A Signal is considered to be in a "open" state if the status is NOT in one of the following states:
          - AFGEHANDELD
          - GEANNULEERD
          - GESPLITST

        Returns a total count of these Signals + a count per category.
      parameters:
        - name: "start"
          in: query
          description: Filters Signals created after this datetime
          schema:
            type: string
          required: false
        - name: "end"
          in: query
          description: Filters Signals created before this datetime
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Returns a total count of Signals in a "open" state + a count per category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateReportResponse'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/reports/signals/reopen-requested/:
    get:
      description: Returns a total count of Signals in the "reopen requested" state + a count per category
      parameters:
        - name: "start"
          in: query
          description: Filters Signals put in the  "reopen requested" state after this datetime
          schema:
            type: string
          required: false
        - name: "end"
          in: query
          description: Filters Signals put in the  "reopen requested" state before this datetime
          schema:
            type: string
          required: false
      responses:
        '200':
          description: Returns a total count of Signals in the "reopen requested" state + a count per category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateReportResponse'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
      security:
        - OAuth2:
            - SIG/ALL

components:
  schemas:
    StatusStateChoices:
      description: Status string (predefined).
      type: string
      enum:
        - m
        - i
        - b
        - h
        - o
        - a
        - s
        - reopened
        - ingepland
        - ready to send
        - sent
        - send failed
        - done external

    PriorityPriorityChoices:
      type: string
      enum:
        - normal
        - high
        - low

    TypeCodeChoices:
      type: string
      enum:
        - SIG
        - REQ
        - QUE
        - COM
        - MAI
      example: 'SIG'

    _NestedLocationRequestData:
      description: JSON Data for location of this Signal.
      type: object
      properties:
        stadsdeel:
          type: string
        buurt_code:
          type: string
        area_code:
          description: Code of specific geographic area this Signal lies in.
          type: string
          nullable: true
        area_name:
          description: Name of specific geographic area this Signal lies in.
          type: string
          nullable: true
        area_type_code:
          description: Code for the geographic area type used to localize Signals.
          type: string
          nullable: true
        address:
          type: object
          properties:
            openbare_ruimte:
              type: string
            huisnummer:
              type: number
            huisletter:
              type: string
            huisnummer_toevoeging:
              type: number
            postcode:
              type: string
            woonplaats:
              type: string
        geometrie:
          type: string
          properties:
            'type':
              type: string
              enum:
                - Point
            coordinates:
              type: array
              items:
                type: number
                minItems: 2
                maxItems: 3
          required:
            - coordinates
            - 'type'
        extra_properties:
          type: string

    _NestedLocationResponseData:
      description: JSON Data
      type: object
      properties:
        stadsdeel:
          type: string
          example: "E"
        buurt_code:
          type: string
          example: "E17a"
        address:
          type: object
          properties:
            postcode:
              type: string
              example: "1053KP"
            huisletter:
              type: string
              nullable: true
              example: ""
            huisnummer:
              type: string
              example: "157"
            woonplaats:
              type: string
              example: "Amsterdam"
            openbare_ruimte:
              type: string
              example: "Bilderdijkstraat"
            huisnummer_toevoeging:
              type: string
              example: "3"
        address_text:
          type: string
          example: "Bilderdijkstraat 157-3 1053KP Amsterdam"
        geometrie:
          type: object
          properties:
            'type':
              type: string
              example: "Point"
            coordinates:
              type: array
              items:
                type: number
                minItems: 2
                maxItems: 3
              example: [4.87170696258545, 52.36805320057393]
        extra_properties:
          type: object
          example: {}

    _NestedStatusRequestData:
      description: JSON Data
      type: object
      properties:
        text:
          type: string
        state:
          $ref: '#/components/schemas/StatusStateChoices'
        target_api:
          type: string
          nullable: true
          enum:
            - sigmax
            - null
        extra_properties:
          type: string

    _NestedStatusResponseData:
      description: JSON Data
      type: object
      properties:
        text:
          nullable: true
          type: string
          example: null
        state:
          $ref: '#/components/schemas/StatusStateChoices'
        target_api:
          type: string
          nullable: true
          example: 'sigmax'
        extra_properties:
          type: object
          example: {}
        created_by:
          type: string
          nullable: true
          example: 'test@test.com'
        created_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"

    _NestedCategoryRequestData:
      description: JSON Data
      type: object
      properties:
        sub_category:
          type: string
          format: uri
          example: https://api.data.amsterdam.nl/signals/v1/public/terms/categories/overig/sub_categories/overig
        text:
          type: string
          description: Message to log with category update, will show in logs.

    _NestedCategoryResponseData:
      description: JSON Data
      type: object
      properties:
        sub:
          type: string
          example: "Overlast terrassen"
        sub_slug:
          type: string
          example: "overlast-terrassen"
        main:
          type: string
          example: "Overlast Bedrijven en Horeca"
        main_slug:
          type: string
          example: "overlast-bedrijven-en-horeca"
        category_url:
          type: string
          format: uri
          example: "http://127.0.0.1:8000/signals/v1/public/terms/categories/overlast-bedrijven-en-horeca/sub_categories/overlast-terrassen"
        departments:
          type: string
          example: "VTH"
        created_by:
          type: string
          nullable: true
          example: null
        text:
          type: string
          nullable: true
          example: null
        deadline:
          description: Deadline if available. Note
            this field may be moved based on user feedback.
          type: string
          format: date-time
          nullable: true
        deadline_factor_3:
          description: Deadline delayed by a factor three if available. Note
            this field may be moved based on user feedback.
          type: string
          format: date-time
          nullable: true

    _NestedReporterRequestData:
      description: JSON Data
      type: object
      properties:
        email:
          type: string
          description: Email address of reporter.
          format: email
        phone:
          type: string
          description: Phone number of reporter.
        sharing_allowed:
          type: boolean
          description: Reporter allows their contact information to be shared (true) or not (false).

    _NestedReporterResponseData:
      description: JSON Data
      type: object
      properties:
        email:
          type: string
          nullable: true
          example: 'test@test.com'
        phone:
          type: string
          nullable: true
          example: ''
        sharing_allowed:
          type: boolean
          description: Reporter allows their contact information to be shared (true) or not (false).
          example: false
        allows_contact:
          type: boolean
          description:  Check if the reporter wants to be contacted or not
          example: true

    _NestedPriorityRequestData:
      description: JSON Data
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/PriorityPriorityChoices'

    _NestedPriorityResponseData:
      description: JSON Data
      type: object
      properties:
        priority:
          $ref: '#/components/schemas/PriorityPriorityChoices'
        created_by:
          type: string
          nullable: true
          example: 'test@test.com'

    _NestedNoteRequestData:
      description: JSON Data
      type: object
      properties:
        text:
          type: string

    _NestedDirectingDepartmentRequestData:
      description: JSON Data
      type: object
      properties:
        id:
          type: integer
          example: 1

    _NestedNoteResponseData:
      description: JSON Data
      type: object
      properties:
        text:
          type: string
          example: 'De statusupdate is per e-mail verzonden aan de melder'
        created_by:
          type: string
          nullable: true
          example: 'test@test.com'

    _NestedTypeRequestData:
      description: JSON Data
      type: object
      properties:
        code:
          $ref: '#/components/schemas/TypeCodeChoices'

    _NestedTypeResponseData:
      description: JSON Data
      type: object
      properties:
        code:
          $ref: '#/components/schemas/TypeCodeChoices'
        created_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        created_by:
          type: string
          nullable: true
          example: 'test@test.com'

    _NestedDirectingDepartmentResponseData:
      description: JSON Data of a directing department, can only be set on a parent Signal
      type: object
      properties:
        id:
          type: integer
          example: 1
        code:
          type: string
          example: 'ASC'
        name:
          type: string
          example: 'Actie service centrum'
        is_intern:
          type: boolean
          example: false

    _NestedRoutingDepartmentResponseData:
      description: JSON Data of a routing department, can only be set on a parent Signal
      type: object
      properties:
        id:
          type: integer
          example: 1
        code:
          type: string
          example: 'ASC'
        name:
          type: string
          example: 'Actie service centrum'
        is_intern:
          type: boolean
          example: false

    V1PrivateSignalPostBulk:
      description: JSON data for creation of Signals/meldingen in bulk (private version). When creating children all items in the list must belong to the same parent. Can also be used to create "normal" Signals/meldingen (Signals/meldingen withouth a parent link).
      type: array
      items:
        $ref: '#/components/schemas/V1PrivateSignalPost'
      minItems: 1
      maxItems: 10

    V1PrivateSignalPost:
      description: JSON data for creation of Signal/melding (private version).
      type: object
      properties:
        source:
          type: string
          example: 'online'
        text:
          type: string
          description: The complaint
          example: 'Er ligt vuilnis midden op straat'
        text_extra:
          type: string
          nullable: true
          example: 'Extra tekst kan hier worden meegegeven, dit veld is niet verplicht'
        location:
          $ref: '#/components/schemas/_NestedLocationRequestData'
        reporter:
          $ref: '#/components/schemas/_NestedReporterRequestData'
        category:
          $ref: '#/components/schemas/_NestedCategoryRequestData'
        priority:
          $ref: '#/components/schemas/_NestedPriorityRequestData'
        'type':
          $ref: '#/components/schemas/_NestedTypeRequestData'
        incident_date_start:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00+00:00'
        incident_date_end:
          type: string
          format: date-time
          nullable: true
          example: '2020-01-01T00:00:00+00:00'
        operational_date:
          type: string
          format: date-time
          nullable: true
          example: '2020-01-01T00:00:00+00:00'
        extra_properties:
          type: object
          example: {}
        parent:
          description: Makes the given Signal a parent of the newly created (child) Signal
          type: integer
        directing_departments:
          description: A list of directing departments that can be set on a parent Signal. For each object in the list only the id is required.
          type: array
          items:
            $ref: '#/components/schemas/_NestedDirectingDepartmentRequestData'
          minItems: 0
        attachments:
          type: array
          items:
            type: string
            example: 'http://127.0.0.1:8000/signals/v1/private/signals/123/attachments/456'
          minItems: 0
        session:
          description: The UUID of a Session containing the answers of a specific Questionnaire
          type: string
          pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
          example: '00000000-0000-0000-0000-000000000000'
          nullable: true
      required:
        - text
        - location
        - reporter
        - category
        - incident_date_start

    V1PublicSignalPost:
      description: JSON data for creation of Signal/melding (public version).
      type: object
      properties:
        source:
          description: This field is optional, if not given the source will be set to "online". Only Sources that are defined public can be used.
          type: string
          example: online
        text:
          type: string
          description: The complaint
          example: Er ligt vuilnis op straat.
        text_extra:
          type: string
          nullable: true
        location:
          $ref: '#/components/schemas/_NestedLocationRequestData'
        category:
          $ref: '#/components/schemas/_NestedCategoryRequestData'
        reporter:
          $ref: '#/components/schemas/_NestedReporterRequestData'
        incident_date_start:
          description: Start of nuisance or problem.
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        incident_date_end:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
          nullable: true
        extra_properties:
          type: array
          items:
            type: object
          example: []
        session:
          description: The UUID of a Session containing the answers of a specific Questionnaire
          type: string
          pattern: '^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$'
          example: '00000000-0000-0000-0000-000000000000'
          nullable: true
      required:
        - text
        - location
        - incident_date_start

    V1PrivateSignalPatch:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/_NestedLocationRequestData'
        status:
          $ref: '#/components/schemas/_NestedStatusRequestData'
        category:
          $ref: '#/components/schemas/_NestedCategoryRequestData'
        priority:
          $ref: '#/components/schemas/_NestedPriorityRequestData'
        'type':
          $ref: '#/components/schemas/_NestedTypeRequestData'
        notes:
          $ref: '#/components/schemas/_NestedNoteRequestData'
        extra_properties:
          type: object
          example: {}
        directing_departments:
          description: A list of directing departments that can be set on a parent Signal. For each object in the list only the id is required.
          type: array
          items:
            $ref: '#/components/schemas/_NestedDirectingDepartmentRequestData'
          minItems: 0

    V1PrivateSignalListGet:
      description: JSON serialization of paginated list of signals
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
                  format: uri
                  example: http://127.0.0.1:8000/signals/v1/private/signals/
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page
                  format: uri
                  nullable: true
                  example: http://127.0.0.1:8000/signals/v1/private/signals/?page=2
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page
                  format: uri
                  nullable: true
                  example: null
        count:
          type: integer
          description: Total count of results for the request
          example: 10
        results:
          type: array
          description: A list of signals, paginated
          items:
            $ref: '#/components/schemas/V1PrivateSignalDetailList'

    V1PrivateSignalDetailList:
      description: Detailed JSON serialization of SIA Signals/meldingen.
      type: object
      properties:
        _links:
          type: object
          properties:
            _link:
              description: HAL JSON links
              type: object
              properties:
                self:
                  type: object
                  properties:
                    href:
                      description: URI of this user in API
                      type: string
                      format: uri
                      example: "http://127.0.0.1:8000/signals/v1/private/signals/1"
        _display:
          description: Textual representation of signal for display purposes.
          type: string
          example: 1 - m - E17a - 2020-01-01 00:00:00.000000+00:00
        category:
          $ref: '#/components/schemas/_NestedCategoryResponseData'
        id:
          description: ID of the signal
          type: integer
          example: 1
        signal_id:
          description: Public identifier for SIA signal, use on public detail endpoint.
          type: string
          format: uuid
        has_attachments:
          type: boolean
          example: false
        location:
          $ref: '#/components/schemas/_NestedLocationResponseData'
        status:
          $ref: '#/components/schemas/_NestedStatusResponseData'
        reporter:
          $ref: '#/components/schemas/_NestedReporterResponseData'
        priority:
          $ref: '#/components/schemas/_NestedPriorityResponseData'
        notes:
          type: array
          items:
            $ref: '#/components/schemas/_NestedNoteResponseData'
          example:
            - text: 'Automatische e-mail bij registratie van de melding is verzonden aan de melder.'
              created_by: 'test@test.com'
            - text: 'De statusupdate is per e-mail verzonden aan de melder'
              created_by: 'test@test.com'
        'type':
          $ref: '#/components/schemas/_NestedTypeResponseData'
        directing_departments:
          type: array
          items:
            $ref: '#/components/schemas/_NestedDirectingDepartmentResponseData'
        source:
          type: string
          example: Telefoon – ASC
        text:
          type: string
          example: Het cafe op de hoek maakt enorme herrie
        text_extra:
          type: string
          nullable: true
          example: null
        created_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        updated_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        incident_date_start:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        incident_date_end:
          type: string
          format: date-time
          nullable: true
          example: "2022-01-01T00:00:00+00:00"
        operational_date:
          type: string
          format: date-time
          nullable: true
          example: "2022-01-01T00:00:00+00:00"
        has_parent:
          type: boolean
        has_children:
          type: boolean
        extra_properties:
          description: >-
            The extra_properties field is used to store the additional questions and answers (questionnaire) that are filled out by a reporter.
            This field contains valid JSON and is generated by the frontend application. The API only performs a couple of simple checks on the format of the provided JSON.
            This leaves considerable freedom to the frontend application with regards to the actual content.

            What checks the API performs can be found in the following JSON schemas:
            - https://github.com/Amsterdam/signals/tree/master/api/app/signals/apps/api/json_schema/extra_properties.json
            - https://github.com/Amsterdam/signals/tree/master/api/app/signals/apps/api/json_schema/extra_properties_streetlights.json
          nullable: true
        routing_departments:
          type: array
          items:
            $ref: '#/components/schemas/_NestedRoutingDepartmentResponseData'
          nullable: true
        assigned_user_email:
          description: The assigned user's email address
          type: string
          format: email
          nullable: true

    V1PrivateSignalListGetGeography:
      description: Geography
      type: object
      properties:
        'type':
          type: string
          example: "FeatureCollection"
        features:
          type: array
          items:
            type: object
            properties:
              'type':
                type: string
                example: "Feature"
              geometry:
                type: object
                properties:
                  'type':
                    type: string
                    example: "Point"
                  coordinates:
                    type: array
                    items:
                      type: integer
                    minItems: 0
                    maxItems: 2
                    example: [4.890986949631043, 52.41875227274259]
              'properties':
                type: object
                properties:
                  id:
                    description: The ID of the Signal
                    type: integer
                    example: 1
                  created_at:
                    type: string
                    format: date-time
                    example: "2020-01-01T00:00:00+00:00"

    V1PrivateSignalDetailGetBulk:
      description: Detailed JSON serialization of SIA Signals/meldingen when creating them in bulk.
      type: array
      items:
        $ref: '#/components/schemas/V1PrivateSignalDetailGet'
      minItems: 1
      maxItems: 10

    V1PrivateSignalDetailGet:
      description: Detailed JSON serialization of a SIA Signal/melding.
      type: object
      properties:
        _links:
          type: object
          properties:
            curies:
              type: object
              properties:
                name:
                  type: string
                  description: The compact URI (curie) named 'sia'
                  example: 'sia'
                href:
                  type: string
                  example: "http://127.0.0.1:8000/signals/v1/relations"
            _link:
              description: HAL JSON links
              type: object
              properties:
                self:
                  type: object
                  properties:
                    href:
                      description: URI of this user in API
                      type: string
                      format: uri
                      example: "http://127.0.0.1:8000/signals/v1/private/signals/123"
            archives:
              type: object
              properties:
                href:
                  type: string
                  format: uri
                  example: "http://127.0.0.1:8000/signals/v1/private/signals/123/history"
            sia:attachments:
              type: object
              properties:
                href:
                  type: string
                  format: uri
                  example: "http://127.0.0.1:8000/signals/v1/private/signals/123/attachments"
            sia:pdf:
              type: object
              properties:
                href:
                  type: string
                  format: uri
                  example: "http://127.0.0.1:8000/signals/v1/private/signals/123/pdf"
        _display:
          description: Textual representation of signal for display purposes.
          type: string
          example: 123 - m - E17a - 2020-01-01 00:00:00.000000+00:00
        category:
          $ref: '#/components/schemas/_NestedCategoryResponseData'
        id:
          description: ID of the signal
          type: integer
          example: 123
        has_attachments:
          type: boolean
          example: false
        location:
          $ref: '#/components/schemas/_NestedLocationResponseData'
        status:
          $ref: '#/components/schemas/_NestedStatusResponseData'
        reporter:
          $ref: '#/components/schemas/_NestedReporterResponseData'
        priority:
          $ref: '#/components/schemas/_NestedPriorityResponseData'
        notes:
          type: array
          items:
            $ref: '#/components/schemas/_NestedNoteResponseData'
          example:
            example:
              - text: 'Automatische e-mail bij registratie van de melding is verzonden aan de melder.'
                created_by: 'test@test.com'
              - text: 'De statusupdate is per e-mail verzonden aan de melder'
                created_by: 'test@test.com'
        'type':
          $ref: '#/components/schemas/_NestedTypeResponseData'
        source:
          type: string
          example: Telefoon – ASC
        text:
          type: string
          example: Het cafe op de hoek maakt enorme herrie
        text_extra:
          type: string
          nullable: true
          example: null
        extra_properties:
          description: >-
            The extra_properties field is used to store the additional questions and answers (questionnaire) that are filled out by a reporter.
            This field contains valid JSON and is generated by the frontend application. The API only performs a couple of simple checks on the format of the provided JSON.
            This leaves considerable freedom to the frontend application with regards to the actual content.

            What checks the API performs can be found in the following JSON schemas:
            - https://github.com/Amsterdam/signals/tree/master/api/app/signals/apps/api/json_schema/extra_properties.json
            - https://github.com/Amsterdam/signals/tree/master/api/app/signals/apps/api/json_schema/extra_properties_streetlights.json
          nullable: true
        created_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        updated_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        incident_date_start:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        incident_date_end:
          type: string
          format: date-time
          nullable: true
          example: null
        directing_departments:
          type: array
          items:
            $ref: '#/components/schemas/_NestedDirectingDepartmentResponseData'
        routing_departments:
          type: array
          items:
            $ref: '#/components/schemas/_NestedRoutingDepartmentResponseData'
          nullable: true
        attachments:
          type: array
          items:
            type: string
            example: 'http://127.0.0.1:8000/signals/v1/private/signals/123/attachments/456'
          minItems: 0
        assigned_user_email:
          description: The assigned user's email address
          type: string
          format: email
          nullable: true

    V1PublicSignalDetailGet:
      description: Detailed JSON serialization of a SIA Signal.
      type: object
      properties:
        _display:
          description: Textual representation of signal for display purposes.
          type: string
          example: SIA-123
        signal_id:
          description: Public identifier for SIA signal, use on public detail endpoint.
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        updated_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        incident_date_start:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        incident_date_end:
          type: string
          format: date-time
          nullable: true
          example: null
        status:
          description: Filtered status of Signal.
          type: object
          properties:
            state:
              description: Public state code either "OPEN" or "CLOSED".
              type: string
            state_display:
              description: Public state display text.
              type: string

    V1PublicSignalGeographyGEOJson:
      description: Signals in a GEOjson format
      type: object
      properties:
        'type':
          type: string
          example: "FeatureCollection"
        features:
          type: array
          items:
            type: object
            properties:
              'type':
                type: string
                example: "Feature"
              geometry:
                type: object
                properties:
                  'type':
                    type: string
                    example: "Point"
                  coordinates:
                    type: array
                    items:
                      type: integer
                    minItems: 0
                    maxItems: 2
                    example: [4.890986949631043, 52.41875227274259]
              'properties':
                type: object
                properties:
                  category:
                    description: The category the signal is in
                    type: object
                    properties:
                      name:
                        description: The public name of the category (fallback is the internal name)
                        example: Zwerfvuil op straat
                      slug:
                        description: The slug of the category
                        example: zwerfvuil-op-straat
                      parent:
                        description: The parent category the signal is in
                        type: object
                        properties:
                          name:
                            description: The public name of the parent category (fallback is the internal name)
                            example: Afval
                          slug:
                            description: The slug of the parent category
                            example: afval
                  created_at:
                    type: string
                    format: date-time
                    example: "2022-02-24T00:00:00+00:00"

    userCreate:
      description: JSON data for user creation
      type: object
      properties:
        username:
          description: Username in SIA, will be shown in interface.
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        is_active:
          description: User is active (true) or inactive (false), the default is true
          type: boolean
        role_ids:
          type: array
          items:
            description: ID of role
            type: integer
        profile:
          description: User profile.
          type: object
          properties:
            department_ids:
              type: array
              items:
                description: ID of department to which the new user belongs.
                type: integer
            note:
              description: Note on this new user.
              type: string
      required:
        - username

    userPatch:
      description: JSON data for user update
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        is_active:
          description: User is active (true) or inactive (false)
          type: boolean
        role_ids:
          type: array
          items:
            description: ID of role
            type: integer
        profile:
          description: User profile.
          type: object
          properties:
            department_ids:
              type: array
              items:
                description: ID of department to which the new user belongs.
                type: integer
            note:
              description: Note on this new user.
              type: string

    publicCategoryListResponse:
      description: JSON data describing the public category response
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the list endpoint
                  format: uri
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the next page of the list endpoint (if not available this is null)
                  format: uri
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the previous page of the list endpoint (if not available this is null)
                  format: uri
        count:
          type: integer
          description: Total count of results for the request
        results:
          type: array
          description: A list of categories, paginated
          items:
            $ref: '#/components/schemas/publicCategoryParentResponse'

    publicCategoryParentResponse:
      description: JSON data describing the public parent category response
      type: object
      properties:
        _links:
          type: object
          properties:
            curies:
              type: object
              properties:
                name:
                  type: string
                  description: The compact URI (curie) named 'sia'
                href:
                  type: string
                  format: uri
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the public category
                  format: uri
            sia:icon:
              type: object
              description: If a icon is set the sia:icon will be present
              properties:
                href:
                  type: string
                  description: URI to the category icon
                  format: uri
        _display:
          type: string
          description: The display value of the category
          example: Afval
        name:
          type: string
          description: The name of the category
          example: Afval
        slug:
          type: string
          description: The (generated) slug of the category
          example: afval
        public_name:
          type: string
          description: The public name
          nullable: True
        is_public_accessible:
          type: boolean
          description: >-
            Returns True if there are child signals that have been marked as public accessible OR True if the parent
            category has been marked public accessible. If the value is True than the categories contains Signals that
            can be shown on for example a public map containing Signals in the city (Only certain properties of the 
            Signal will be exposed).
          example: True
        sub_categories:
          type: array
          description: A list of child categories
          items:
            $ref: '#/components/schemas/publicCategoryChildResponse'

    publicCategoryChildResponse:
      description: JSON data describing the public parent category response
      type: object
      properties:
        _links:
          type: object
          properties:
            curies:
              type: object
              properties:
                name:
                  type: string
                  description: The compact URI (curie) named 'sia'
                href:
                  type: string
                  format: uri
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the public category
                  format: uri
            sia:icon:
              type: object
              description: If a icon is set the sia:icon will be present
              properties:
                href:
                  type: string
                  description: URI to the category icon
                  format: uri
        _display:
          type: string
          description: The display value of the category
          example: Asbest / accu
        name:
          type: string
          description: The name of the category
          example: Asbest / accu
        slug:
          type: string
          description: The (generated) slug of the category
          example: asbest-accu
        handling:
          type: string
          example: A3DMC
        departments:
          type: array
          items:
            type: object
            properties:
              code:
                description: The code of the department
                type: string
                example: ASC
              name:
                description: The name of the department
                type: string
                example: Actie service centrum
              is_intern:
                description: Department is internal or external
                type: boolean
                example: true
        is_active:
          type: boolean
          description: If the current category is still active
          example: false
        description:
          type: string
          description: Description of the category
          nullable: true
        handling_message:
          type: string
          description: Handling message of the category (this is also mailed to the reporter)
          example: We laten u binnen 3 werkdagen weten wat we hebben gedaan...
        public_name:
          type: string
          description: The public name
          nullable: True
          example: Asbest / accu (Publieke naam)
        is_public_accessible:
          type: boolean
          description: >-
            Returns True if the category has been marked public accessible. If the value is True than the category 
            contains Signals that can be shown on for example a public map containing Signals in the city (Only certain 
            properties of the Signal will be exposed).
          example: True

    privateCategoryResponse:
      description: JSON data describing the category response
      type: object
      properties:
        _links:
          type: object
          properties:
            curies:
              type: object
              properties:
                name:
                  type: string
                  description: The compact URI (curie) named 'sia'
                href:
                  type: string
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the private category
                public:
                  type: string
                  description: URI to the public category
            sia:status-message-templates:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the status message templates of the category
            sia:parent:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the private parent category parent
                public:
                  type: string
                  description: URI to the public parent category detail
            sia:questionnaire:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the public questionnaire
        _display:
          type: string
          description: The display value of the category
        id:
          type: integer
          description: The id of the category
        name:
          type: string
          description: The name of the category
        slug:
          type: string
          description: The (generated) slug of the category
        is_active:
          type: boolean
          description: If the current category is still active
        description:
          type: string
          description: Description of the category
        handling_message:
          type: string
          description: Handling message of the category (this is also mailed to the reporter)
        sla:
          type: object
          properties:
            n_days:
              type: integer
              description: Number of days describing the SLA time
            use_calendar_days:
              type: boolean
              description: If the n_days is in calendar days (true) or working days (false)
        departments:
          type: array
          description: A readonly list of departments for the selected category
          items:
            type: object
            properties:
              id:
                description: ID of the department
                type: integer
              code:
                description: The code of the department
                type: string
              name:
                description: The name of the department
                type: string
              is_intern:
                description: Department is internal or external
                type: boolean
              is_responsible:
                description: >-
                  The department being created is responsible for given category
                  as identified by the `category_id` (true) or not (false).
                  Defaults to false.
                type: boolean
              can_view:
                description: >-
                  The department being created can view given category as
                  identified by the `category_id` (true) or not (false).
                  Defaults to false.
                type: boolean
        note:
          type: string
          nullable: true
          description: Note field, used internally.
        public_name:
          type: string
          nullable: true
          description: The public name of a Category
        is_public_accessible:
          type: boolean
          nullable: false
          default: false
          description: >-
            This will toggle if the category (and it's signals) can be accessed 
            through the public endpoin(s). Will be used for the public map
            showing the reporter open siganls in the area for the categroy 
            he/she is making a complaint.

    privateCategoryListResponse:
      description: JSON data describing the category response
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the list endpoint
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the next page of the list endpoint (if not available this is null)
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the previous page of the list endpoint (if not available this is null)
        count:
          type: integer
          description: Total count of results for the request
        results:
          type: array
          description: A list of categories, paginated
          items:
            $ref: '#/components/schemas/privateCategoryResponse'

    privateCategoryPatch:
      description: JSON data for category updates
      type: object
      properties:
        name:
          type: string
          description: The name of the category
        description:
          type: string
          description: Description of the category
        is_active:
          type: boolean
          description: If the current category is still active
        new_sla:
          type: object
          description: This will add a new sla to the category
          properties:
            n_days:
              type: integer
              description: Number of days describing the SLA time
            use_calendar_days:
              type: boolean
              description: If the n_days is in calendar days (true) or working days (false)
        handling_message:
          type: string
          description: The handling message, used in the e-mail to the reporter
        public_name:
          type: string
          nullable: true
          description: The public name of a Category
        is_public_accessible:
          type: boolean
          nullable: false
          description: >-
            This will toggle if the category (and it's signals) can be accessed 
            through the public endpoin(s). Will be used for the public map
            showing the reporter open siganls in the area for the categroy 
            he/she is making a complaint.

    privateCategoryStatusMessageTemplatesRequest:
      description: JSON data describing the status message templates for a category and state (Request)
      type: array
      items:
        type: object
        properties:
          state:
            $ref: '#/components/schemas/StatusStateChoices'
            example: 'm'
          templates:
            type: array
            items:
              type: object
              properties:
                title:
                  type: string
                  example: Title of the status message template
                text:
                  type: string
                  example: The text of the status message template
                is_active:
                  description: Not required, will default to False
                  type: boolean
                  example: true

    privateCategoryStatusMessageTemplatesResponse:
      description: JSON data describing the status message templates for a category and state (Response)
      type: array
      items:
        type: object
        properties:
          state:
            $ref: '#/components/schemas/StatusStateChoices'
            example: 'm'
          templates:
            type: array
            items:
              type: object
              properties:
                title:
                  type: string
                  example: Title of the status message template
                text:
                  type: string
                  example: The text of the status message template
                is_active:
                  type: boolean
                  example: true

    privateDepartmentListResponse:
      description: JSON data for a list of departments.
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the list endpoint
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the next page of the list endpoint (if not available this is null)
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the previous page of the list endpoint (if not available this is null)
        count:
          type: integer
          description: Total count of results for the request
        results:
          type: array
          description: A list of categories, paginated
          items:
            $ref: '#/components/schemas/privateDepartmentResponse'

    privateDepartmentResponse:
      description: JSON data for a department.
      type: object
      properties:
        _links:
          description: HAL JSON links
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  description: URI of this department in API
                  type: string
                  format: uri
        _display:
          description: Textual representation of department for display purposes.
          type: string
        id:
          description: ID of department
          type: integer
        name:
          type: string
          description: Name of department
        code:
          type: string
          description: Three letter code of department
        is_intern:
          type: boolean
          description: TBD, defaults to false.
        can_direct:
          type: boolean
          description: >-
            This department can potentially be a directing department if true.
        category_names:
          type: array
          items:
            description: Name of linked category
            type: string

    privateDepartmentDetailResponse:
      description: Detailed JSON data for a department.
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  description: Hyperlink to detailed data of this department.
                  type: string
              required:
                - href
          required:
            - self
        _display:
          description: Textual representation of department for display purposes.
          type: string
        id:
          description: ID of department
          type: integer
        name:
          type: string
          description: Name of department
        code:
          type: string
          description: Three letter code of department
        is_intern:
          type: boolean
          description: TBD, defaults to false.
        can_direct:
          type: boolean
          description: >-
            This department can potentially be a directing department if true.
        categories:
          type: array
          description: >-
            List of categories associated with this department (both those that
            are visible to this department and those for which this department
            is responsible).
          items:
            type: object
            description: Nested category representation

    departmentCreate:
      description: JSON data for new department
      type: object
      properties:
        name:
          type: string
          description: Name of department
        code:
          type: string
          description: Three letter code of department
        is_intern:
          type: boolean
          description: TBD, defaults to false.
        can_direct:
          type: boolean
          description: >-
            This department can potentially be a directing department if true.
        categories:
          type: array
          items:
            type: object
            properties:
              category_id:
                description: ID of category
                type: integer
              is_responsible:
                description: >-
                  The department being created is responsible for given category
                  as identified by the `category_id` (true) or not (false).
                  Defaults to false.
                type: boolean
              can_view:
                description: >-
                  The department being created can view given category as
                  identified by the `category_id` (true) or not (false).
                  Defaults to false.
                type: boolean
            required:
              - category_id
      required:
        - name
        - code

    departmentPatch:
      description: JSON data for partial update to department.
      type: object
      properties:
        name:
          type: string
          description: Name of department
        code:
          type: string
          description: Three letter code of department
        is_intern:
          type: boolean
          description: TBD, defaults to false.
        can_direct:
          type: boolean
          description: >-
            This department can potentially be a directing department if true.
        categories:
          type: array
          items:
            type: object
            properties:
              category_id:
                description: ID of category
                type: integer
              is_responsible:
                description: >-
                  The department being created is responsible for given category
                  as identified by the `category_id` (true) or not (false).
                  Defaults to false.
                type: boolean
              can_view:
                description: >-
                  The department being created can view given category as
                  identified by the `category_id` (true) or not (false).
                  Defaults to false.
                type: boolean

    V1PrivateExpressionContextGet:
      description: >-
        Example identifiers with types for context.
      type: object
      properties:
        results:
          description: List of child expression context types
          type: array
          items:
            type: object
            properties:
              identifier:
                description: identifier name
                type: string
              identifier_type:
                description: identifier type (point, time, str, set, dict, number)
                type: string
              type:
                description: context type name
                type: string

    expressionCreate:
      description: JSON data for new department
      type: object
      properties:
        name:
          type: string
          description: Name of expression
        code:
          type: string
          description: expression in expression language
        type:
          type: string
          description: type of expression
      required:
        - name
        - code
        - type

    expressionPatch:
      description: JSON data for partial update to department.
      type: object
      properties:
        name:
          type: string
          description: Name of expression
        code:
          type: string
          description: expression in expression language
        type:
          type: string
          description: type of expression
      required:
        - name
        - code
        - type

    privateUserListResponse:
      description: JSON serialization of paginated list of SIA users.
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page in SIA users list (null) if not available
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page in SIA users list (null) if not available
        count:
          type: integer
          description: Total count of results for the request
        results:
          type: array
          description: A list of categories, paginated
          items:
            $ref: '#/components/schemas/privateNestedUserResponse'

    privateNestedUserResponse:
      description: JSON serialization of a SIA user.
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  description: Hyperlink to detailed data of this user.
                  type: string
              required:
                - href
          required:
            - self
        _display:
          description: Textual representation of user for display purposes.
          type: string
        id:
          description: ID of user
          type: integer
        username:
          description: Username
          type: string
          format: email
        is_active:
          description: User is active (true) or inactive (false)
          type: boolean
        roles:
          description: List of roles for this user.
          type: array
          items:
            description: Name of role.
            type: string
        profile:
          $ref: '#/components/schemas/privateNestedProfileResponse'

    privateNestedProfileResponse:
      description: JSON serialization of a SIA user profile
      type: object
      properties:
        note:
          description: Note field associated with a SIA user.
          type: string
        departments:
          description: List of departments associated with a SIA user.
          type: array
          items:
            description: Name of department
            type: string
        created_at:
          description: Timestamp of user profile creation
          type: string
          format: date-time
        updated_at:
          description: Timestamp of last user profile update
          type: string
          format: date-time

    privateUserDetailResponse:
      description: Detailed JSON serialization of a SIA user.
      type: object
      properties:
        _link:
          description: HAL JSON links
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  description: URI of this user in API
                  type: string
                  format: uri
        _display:
          description: Textual representation of user for display purposes.
          type: string
        id:
          description: ID of user
          type: integer
        username:
          description: Username (must be an email address for SIA).
          type: string
          format: email
        email:
          description: Email of user, matches username.
          type: string
          format: email
        first_name:
          description: First name of SIA user.
          type: string
        last_name:
          description: Last name of SIA user.
          type: string
        is_active:
          description: User is active (true) or inactive (false)
          type: boolean
        is_staff:
          description: >-
            SIA is build using the Django web framework. This framework has a
            built-in admin interface for maintenance, users that have the
            is_staff flag set to true are allowed access to this admin
            interface. In SIA the admin is purely for technical purposes,
            day-to-day user management can be achieved through the API and
            associated frontend.
          type: boolean
        is_superuser:
          description: >-
            User has superuser privileges that trump all permission checks
            (true) or has normal user user privileges (false).
          type: boolean
        roles:
          description: List of roles associated with the SIA user.
          type: array
          items:
            $ref: '#/components/schemas/privateNestedRoleResponse'
        permissions:
          description: List of permissions assigned directly to user (not via roles).
          type: array
          items:
            $ref: '#/components/schemas/privateNestedPermissionResponse'
        profile:
           $ref: '#/components/schemas/privateNestedProfileResponse'

    privateUsernameListResponse:
      description: JSON serialization of paginated list of SIA users.
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page in SIA users list (null) if not available
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page in SIA users list (null) if not available
        count:
          type: integer
          description: Total count of results for the request
        results:
          type: array
          description: A list of categories, paginated
          items:
            $ref: '#/components/schemas/privateNestedUsernameResponse'

    privateNestedUsernameResponse:
      description: JSON serialization of a SIA username.
      type: object
      properties:
        username:
          description: Username
          type: string
          format: email

    V1PrivateSignalchildrenGet:
      description: >-
        Child signals associated with a specific parent Signal. If the
        requesting user has access to the parent signal and not the child
        signals, they will still be visible in this endpoint in an
        abridged representation.
      type: object
      properties:
        _links:
          description: HAL JSON links
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  description: URI of these child signals in API
                  type: string
                  format: uri
        count:
          description: Number of child signals associated with parent signal.
          type: integer
        results:
          description: List of child signals
          type: array
          items:
            type: object
            properties:
              _links:
                description: HAL JSON links
                type: object
                properties:
                  self:
                    type: object
                    properties:
                      href:
                        description: URI of this child signal
                        type: string
                        format: uri
              id:
                description: child signal ID
                type: integer
              status:
                description: child signal status
                type: object
                properties:
                  state:
                    type: string
                    description: status "state" code
                  state_display:
                    type: string
                    description: display name of status
              category:
                description: Main and sub category of child signal
                type: object
                properties:
                  sub:
                    type: string
                    description: sub category name
                  sub_slug:
                    type: string
                    description: sub category slug
                  departments:
                    type: string
                    description: department codes associated with sub category
                  main:
                    type: string
                    description: main category name
                  main_slug:
                    type: string
                    description: main category slug

    privateNestedRoleResponse:
      description: A SIA role
      type: object
      properties:
        _link:
          description: HAL JSON links
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  description: URI of this role in API
                  type: string
                  format: uri
        _display:
          description: Textual representation of role for display purposes.
          type: string
        id:
          description: ID of this role
          type: integer
        name:
          description: Name of this role
          type: string
        permissions:
          description: List of permissions associated with this role
          type: array
          items:
            $ref: '#/components/schemas/privateNestedPermissionResponse'

    privateNestedPermissionResponse:
      description: SIA permission
      type: object
      properties:
        _link:
          description: HAL JSON links
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  description: URI of this permission in API
                  type: string
                  format: uri
        _display:
          description: Textual representation of permission for display purposes.
          type: string
        id:
          description: ID of this permission
          type: integer
        name:
          description: Name of this permission
          type: string
        codename:
          description: Codename (technical) of this permission
          type: string

    V1AreasGEOJsonList:
      description: EXPERIMENTAL - Area GEOjson list
      type: object
      properties:
        'type':
          type: string
          example: "FeatureCollection"
        features:
          type: array
          items:
            items:
              $ref: '#/components/schemas/V1AreaGEOJson'

    V1AreaGEOJson:
      description: EXPERIMENTAL - Area GEOjson
      type: object
      properties:
        'type':
          type: string
          example: "Feature"
        geometry:
          type: object
          properties:
            'type':
              type: string
              example: "MultiPolygon"
            coordinates:
              type: array
              items:
                type: integer
              minItems: 0
              maxItems: 2
              example: [[[[0.0, 0.0], [0.0, 1.0], [1.0, 1.0], [0.0, 0.0]]], [[[1.0, 1.0], [1.0, 2.0], [2.0, 2.0], [1.0, 1.0]]]]
        'properties':
          type: object
          properties:
            name:
              description: The Name of the Area
              type: string
              example: Amsterdam
            'type':
              type: object
              properties:
                name:
                  description: The Name of the Area type
                  type: string
                  example: Gebied
                code:
                  description: The code of the Area type
                  type: string
                  example: gebied

    V1AreasJsonList:
      description: EXPERIMENTAL - Area GEOjson list
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
                  format: uri
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page
                  format: uri
                  nullable: true
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page
                  format: uri
                  nullable: true
                  example: null
        count:
          type: integer
          description: Total count of results for the request
          example: 1
        results:
          type: array
          description: A list of signals, paginated
          items:
            $ref: '#/components/schemas/V1AreaJson'

    V1AreaJson:
      description: EXPERIMENTAL - Area GEOjson
      type: object
      properties:
        name:
          description: The Name of the Area
          type: string
          example: Gebied
        code:
          description: The code of the Area
          type: string
          example: gebied
        'type':
          type: object
          properties:
            name:
              description: The Name of the Area type
              type: string
              example: Gebied
            code:
              description: The code of the Area type
              type: string
              example: gebied
        bbox:
          type: array
          items:
            type: integer
          example: [4.804035, 52.306854, 4.87683, 52.352063]

    V1QuestionsJsonList:
      description: EXPERIMENTAL - Questions json list
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
                  format: uri
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page
                  format: uri
                  nullable: true
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page
                  format: uri
                  nullable: true
                  example: null
        count:
          type: integer
          description: Total count of results for the request
          example: 1
        results:
          type: array
          description: A list of signals, paginated
          items:
            $ref: '#/components/schemas/V1QuestionJson'

    V1QuestionJson:
      description: EXPERIMENTAL - Question json
      type: object
      properties:
        key:
          description: The question key
          type: string
          example: extra_bedrijven_horeca_personen
        field_type:
          description: The code of the Area
          type: string
          enum:
            - 'PlainText'
            - 'TextInput'
            - 'MultiTextInput'
            - 'CheckboxInput'
            - 'RadioInput'
            - 'SelectInput'
            - 'TextareaInput'
            - 'MapSelect'
            - 'AssetSelect'
          example: CheckboxInput
        meta:
          type: object

    V1SourceList:
      description: List of sources
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
                  format: uri
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page
                  format: uri
                  nullable: true
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page
                  format: uri
                  nullable: true
                  example: null
        count:
          type: integer
          description: Total count of results for the request
          example: 1
        results:
          type: array
          description: A list of signals, paginated
          items:
            $ref: '#/components/schemas/V1Source'

    V1Source:
      description: Possible signal source
      type: object
      properties:
        id:
          description: ID of source
          type: integer
          example: 1
        name:
          description: Name of source
          type: string
          example: Eigen organisatie
        description:
          description: Description of source
          type: string
          example: Binnengekomen via de eigen organisatie

    V1PrivateSignalAttachmentsList:
      description: List of sources
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
                  format: uri
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page
                  format: uri
                  nullable: true
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page
                  format: uri
                  nullable: true
                  example: null
        count:
          type: integer
          description: Total count of results for the request
          example: 1
        results:
          type: array
          description: A list of Attachments, paginated
          items:
            $ref: '#/components/schemas/V1PrivateSignalAttachmentDetail'

    V1PrivateSignalAttachmentDetail:
      description: Attachment
      type: object
      properties:
        _display:
          description: Textual representation of signal for display purposes.
          type: string
          example: Attachment object (1)
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the attachment detail
        location:
          description: The location of the attachment, for downloading.
          type: string
          example: /signals/media/images/2020/01/01/happy-new-year.jpg
        is_image:
          description: Boolean that indicates whether this attachment is image. Value is `true` if image else `false`.
          type: boolean
          example: true
        created_at:
          description: Timestamp of attachment's creation (upload).
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        created_by:
          description: Username of the attachment's uploader.
          type: string
          example: someuser@example.com

    privateContextResponse:
      description: JSON data describing the context overview of a Signal
      type: object
      properties:
        _links:
          type: object
          properties:
            curies:
              type: object
              properties:
                name:
                  type: string
                  description: The compact URI (curie) named 'sia'
                href:
                  type: string
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the context overview of a Signal
                  example: http://127.0.0.1:8000/signals/v1/private/signals/1/context/
            sia:context-reporter-detail:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the detailed context based on the reporter email
                  example: http://127.0.0.1:8000/signals/v1/private/signals/1/context/reporter/
            sia:context-geography-detail:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the detailed context based on geography
                  example: http://127.0.0.1:8000/signals/v1/private/signals/1/context/near/geography/
        near:
          type: object
          properties:
            signal_count:
              type: integer
              example: 10
        reporter:
          type: object
          properties:
            signal_count:
              type: integer
              example: 5
            open_count:
              type: integer
              example: 2
            positive_count:
              type: integer
              example: 2
            negative_count:
              type: integer
              example: 1

    privateContextReporterResponse:
      description: Detailed JSON serialization of SIA Signals/meldingen related to the reporter email
      type: object
      properties:
        id:
          description: ID of the signal
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: "2021-04-14T00:00:00+00:00"
        category:
          type: object
          properties:
            sub:
              type: string
              example: "Overlast terrassen"
            sub_slug:
              type: string
              example: "overlast-terrassen"
            main:
              type: string
              example: "Overlast Bedrijven en Horeca"
            main_slug:
              type: string
              example: "overlast-bedrijven-en-horeca"
            departments:
              type: string
              example: "VTH"
        status:
          type: object
          properties:
            state:
              type: string
              example: 'm'
            state_display:
              type: string
              example: 'Gemeld'
        feedback:
          type: object
          description: The latest given feedback, can also be null if there is no feedback
          nullable: true
          properties:
            is_satisfied:
              type: boolean
              example: false
            submitted_at:
              type: string
              format: date-time
              example: "2021-04-14T00:00:00+00:00"
        can_view_signal:
          type: boolean
          example: true
        has_children:
          type: boolean
          example: true

    privateContextReporterResponseList:
      description: JSON serialization of paginated list of signals related to the reporter email
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
                  format: uri
                  example: http://127.0.0.1:8000/signals/v1/private/signals/1/context/reporter/?page=2
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page
                  format: uri
                  nullable: true
                  example: http://127.0.0.1:8000/signals/v1/private/signals/1/context/reporter/?page=3
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page
                  format: uri
                  nullable: true
                  example: http://127.0.0.1:8000/signals/v1/private/signals/1/context/reporter/?page=1
        count:
          type: integer
          description: Total count of results for the request
          example: 10
        results:
          type: array
          description: A list of signals context, paginated
          items:
            $ref: '#/components/schemas/privateContextReporterResponse'

    privateContextNearGeographyResponse:
      description: Geography
      type: object
      properties:
        'type':
          type: string
          example: "FeatureCollection"
        features:
          type: array
          items:
            type: object
            properties:
              'type':
                type: string
                example: "Feature"
              geometry:
                type: object
                properties:
                  'type':
                    type: string
                    example: "Point"
                  coordinates:
                    type: array
                    items:
                      type: integer
                    minItems: 0
                    maxItems: 2
                    example: [ 4.890986949631043, 52.41875227274259 ]
              'properties':
                type: object
                properties:
                  id:
                    description: The ID of the Signal
                    type: integer
                    example: 1
                  status:
                    type: object
                    properties:
                      state:
                        format: string
                        example: "m"
                      state_display:
                        format: string
                        example: "Gemeld"
                  created_at:
                    type: string
                    format: date-time
                    example: "2020-01-01T00:00:00+00:00"

    privateReportResponse:
      type: object
      properties:
        total_signal_count:
          type: integer
          example: 12345
        results:
          type: array
          items:
            type: object
            properties:
              category:
                type: object
                properties:
                  name:
                    type: string
                    example: "Example Category"
                  departments:
                    type: array
                    items:
                      type: string
                      example: 'ASC'
              signal_count:
                type: integer
                example: 12345
            minItems: 0

    privateStoredSignalFilterResponseList:
      description: JSON serialization of paginated list of stored Signal filters
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
                  format: uri
                  example: http://127.0.0.1:8000/signals/v1/private/me/filters
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page
                  format: uri
                  nullable: true
                  example: http://127.0.0.1:8000/signals/v1/private/me/filters/?page=2
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page
                  format: uri
                  nullable: true
                  example: null
        count:
          type: integer
          description: Total count of results for the request
          example: 10
        results:
          type: array
          description: A list of stored Signal filters, paginated
          items:
            $ref: '#/components/schemas/privateStoredSignalFilterResponse'

    privateStoredSignalFilterResponse:
      description: Detailed JSON serialization of a stored Signal filter.
      type: object
      properties:
        _link:
          description: HAL JSON links
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  description: URI of this stored Signal filter in API
                  type: string
                  format: uri
                  example: http://127.0.0.1:8000/signals/v1/private/me/filters/123
        _display:
          description: Textual representation of the stored Signal filter for display purposes.
          type: string
        id:
          description: ID of stored Signal filter
          type: integer
          example: 123
        name:
          type: string
          example: "My stored filter"
        created_at:
          type: string
          format: date-time
          example: "2021-08-16T00:00:00+00:00"
        options:
          type: object
          example: {}
        refresh:
          type: boolean
          default: False
        show_on_overview:
          type: boolean
          default: False

    privateStoredSignalFilterRequest:
      description: Detailed JSON post/patch serialization for a stored Signal filter.
      type: object
      properties:
        name:
          type: string
          example: "My stored filter"
        created_at:
          type: string
          format: date-time
          example: "2021-08-16T00:00:00+00:00"
        options:
          type: object
          example: { }
        refresh:
          type: boolean
          default: False
        show_on_overview:
          type: boolean
          default: False

    publicFeedbackForm:
      description: JSON data for category updates
      type: object
      properties:
        is_satisfied:
          type: boolean
          description: Flag if the reporter is satisfied or not
        allows_contact:
          type: boolean
          description: Flag if the reporter allows for contacting
        text:
          type: string
          description: text giving by the reporter
        text_list:
          description: List of texts from the reporter
          type: array
          items:
            type: string
        text_extra:
          type: string
          description: Extra set of text from the reporter
      required:
        - is_satisfied
        - allows_contact
        - text_extra

    V1StandardAnswersList:
      description: List of standard answers
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
                  format: uri
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page
                  format: uri
                  nullable: true
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page
                  format: uri
                  nullable: true
                  example: null
        count:
          type: integer
          description: Total count of results for the request
          example: 1
        results:
          type: array
          description: A list of standard answers, paginated
          items:
            $ref: '#/components/schemas/V1StandardAnswers'

    V1StandardAnswers:
      description: Standard answer
      type: object
      properties:
        is_satisfied:
          description: If a standard answer is a positive or negative answer
          type: boolean
          example: True
        text:
          description: The text of the standard asnwer
          type: string
          example: Ik ben goed geholpen
        topic:
          description: The topic a standard answer belongs to
          type: string
          example: Hoe heeft de gemeente u geholpen?

  securitySchemes:
    OAuth2:
      description: SIA API is using OAuth2 implicit grant flow.
      type: oauth2
      flows:
        implicit:
          authorizationUrl: '/oauth2/authorize'
          scopes:
            SIG/ALL: General access to SIA Django application.
