openapi: 3.0.0
info:
  title: Signalen Informatievoorziening Amsterdam (SIA) API spec V1"
  description: >-
    One of the tasks of the municipality of Amsterdam is to maintain
    public spaces like roads, parks. When citizens have complaints about public
    spaces they can leave these complaints with the municipality. SIA, the
    Signalen Informatievoorziening Amsterdam, receives these complaints and is
    used to track progress towards their resolution.


    SIA provides an API that is used both by the SIA frontend and external
    systems that integrate with SIA. This swagger file documents that API.
  contact:
    email: "datapunt@amsterdam.nl"
  version: "TBD"
paths:
  /signals/v1/private/signals/:
    get:
      description: Signals list endpoint
      parameters:
        - name: "created_before"
          in: query
          description: >-
            Filter returns only signals created before specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: "created_after"
          in: query
          description: >-
            Filter returns only signals created after specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: "updated_before"
          in: query
          description: >-
            Filter returns only signals updated before specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: updated_after
          in: query
          description: >-
            Filter returns only signals updated after specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: status
          in: query
          description: Filter returns only signals with specified status.
          schema:
            $ref: '#/components/schemas/StatusStateChoices'
          required: false
        - name: maincategory_slug
          description: Filter returns only signals with matching main category
            slug.
          in: query
          required: false
          schema:
            type: string
        - name: category_slug
          description: >-
            Filter returns only signals with matching sub category slug.
          in: query
          required: false
          schema:
            type: string
        - name: contact_details
          in: query
          description: >-
            Filter signals according to the presence of contact details, accepts
            (a combination of) the following values `none` for no contact
            details, `phone` for the presence of a reporter's phone number, and
            `email` for the presence of a reporter's email address.
          schema:
            type: string
            enum:
              - none
              - phone
              - email
          required: false
        - name: priority
          in: query
          description: >-
            Filter signals according to their priority, accepts (a combination
            of) the following values: `low`, `high` and/or `normal`.
          required: false
          schema:
            type: string
            enum:
              - low
              - normal
              - high
        - name: feedback
          in: query
          description: >-
            Filter Signals/meldingen according to wether feedback was received
            for them. This filter accepts one of the following values:
            `satisfied` (reporter was satisfied with the resolution),
            `not_satisfied` (reporter was not satisfied with the resolution),
            or `not_received` (no feedback was sent by the reporter). Only the
            newest feedback is taken into account.
          required: false
          schema:
            type: string
            enum:
              - satisfied
              - not_satisfied
              - not_received
        - name: source
          in: query
          description: >-
            Filter Signals/meldingen according to their source, accepted values
            are derived from the database. Source `online` are Signals/meldingen
            that were created in the public website.
          required: false
          schema:
            type: string
        - name: 'type'
          in: query
          description: >-
            Filter signals according to the currently assigned type, accepts
            (a combination of) the values `SIG` a "Signal/Melding", `REQ` a "Request/Aanvraag", `QUE` a "QuestionVraag", `COM` a "Complaint/Klacht" and `MAI` a "Maintenance/Groot onderhoud"
          schema:
            type: string
            enum:
              - SIG
              - REQ
              - QUE
              - COM
              - MAI
          required: false
        - name: note_keyword
          in: query
          description: >-
            This filter option is temporary, and will likely be replaced by
            either proper tagging or extended search using the Elastic Search
            implementation of SIA.
            Filter Signals/meldingen according to the presence of a certain
            keyword in one or more of notes associated with a Signal/melding.
            Accepts one keyword, will check wether it is present and return the
            Signals/meldingen where it is present.
          required: false
          schema:
            type: string
        - name: directing_department
          in: query
          description: >-
            Filter signals according to the currently assigned directing department(s), accepts
            (a combination of) the codes of the declared departments
          schema:
            type: string
            example: 'ASC'
          required: false
        - name: area_type_code
          in: query
          description: >-
            Filter signals according to the currently assigned location area_type_code, accepts
            a single area_type_code. area_code is required if area_type_code is present.
          schema:
            type: string
            example: 'district'
          required: false
        - name: area_code
          in: query
          description: >-
            Filter signals according to the currently assigned location area_code, accepts
            a single area_code. area_type_code is required if area_code is present.
          schema:
            type: string
            example: 'ASC'
          required: false

      responses:
        '200':
          description: List of signals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalListGet'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
      security:
        - OAuth2:
            - SIG/ALL
    post:
      description: Creates a new signal
      requestBody:
        description: Serialized signal data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1PrivateSignalPost'
      responses:
        '201':
          description: New signal created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalDetailGet'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
      security:
        - OAuth2:
            - SIG/ALL
  /signals/v1/private/signals/geography:
    get:
      description: Signals geography list endpoint
      parameters:
        - name: "created_before"
          in: query
          description: >-
            Filter returns only signals created before specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: "created_after"
          in: query
          description: >-
            Filter returns only signals created after specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: "updated_before"
          in: query
          description: >-
            Filter returns only signals updated before specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: updated_after
          in: query
          description: >-
            Filter returns only signals updated after specified datetime. Note
            the date time string should be in ISO 8601 format and URL encoded.
          schema:
            type: string
            format: date-time
          required: false
        - name: status
          in: query
          description: Filter returns only signals with specified status.
          schema:
            $ref: '#/components/schemas/StatusStateChoices'
          required: false
        - name: maincategory_slug
          description: Filter returns only signals with matching main category
            slug.
          in: query
          required: false
          schema:
            type: string
        - name: category_slug
          description: >-
            Filter returns only signals with matching sub category slug.
          in: query
          required: false
          schema:
            type: string
        - name: contact_details
          in: query
          description: >-
            Filter signals according to the presence of contact details, accepts
            (a combination of) the following values `none` for no contact
            details, `phone` for the presence of a reporter's phone number, and
            `email` for the presence of a reporter's email address.
          schema:
            type: string
            enum:
              - none
              - phone
              - email
          required: false
        - name: priority
          in: query
          description: >-
            Filter signals according to their priority, accepts (a combination
            of) the following values: `low`, `high` and/or `normal`.
          required: false
          schema:
            type: string
            enum:
              - low
              - normal
              - high
        - name: feedback
          in: query
          description: >-
            Filter Signals/meldingen according to wether feedback was received
            for them. This filter accepts one of the following values:
            `satisfied` (reporter was satisfied with the resolution),
            `not_satisfied` (reporter was not satisfied with the resolution),
            or `not_received` (no feedback was sent by the reporter). Only the
            newest feedback is taken into account.
          required: false
          schema:
            type: string
            enum:
              - satisfied
              - not_satisfied
              - not_received
        - name: source
          in: query
          description: >-
            Filter Signals/meldingen according to their source, accepted values
            are derived from the database. Source `online` are Signals/meldingen
            that were created in the public website.
          required: false
          schema:
            type: string
        - name: 'type'
          in: query
          description: >-
            Filter signals according to the currently assigned type, accepts
            (a combination of) the values `SIG` a "Signal/Melding", `REQ` a "Request/Aanvraag", `QUE` a "QuestionVraag", `COM` a "Complaint/Klacht" and `MAI` a "Maintenance/Groot onderhoud"
          schema:
            type: string
            enum:
              - SIG
              - REQ
              - QUE
              - COM
              - MAI
          required: false
        - name: note_keyword
          in: query
          description: >-
            This filter option is temporary, and will likely be replaced by
            either proper tagging or extended search using the Elastic Search
            implementation of SIA.
            Filter Signals/meldingen according to the presence of a certain
            keyword in one or more of notes associated with a Signal/melding.
            Accepts one keyword, will check wether it is present and return the
            Signals/meldingen where it is present.
          required: false
          schema:
            type: string

      responses:
        '200':
          description: List of signals
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalListGetGeography'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
      security:
        - OAuth2:
            - SIG/ALL
  /signals/v1/private/signals/{id}:
    parameters:
      - name: id
        in: path
        description: ID of signal that is requested
        required: true
        schema:
          type: integer
          example: 1
    get:
      description: Retrieve signal by ID.
      responses:
        '200':
          description: The requested signal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalDetailGet'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
        '404':
          description: Signal not found.
      security:
        - OAuth2:
            - SIG/ALL
    patch:
      description: Partial update to signal.
      requestBody:
        description: JSON data to update signal.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1PrivateSignalPatch'
      responses:
        '200':
          description: The updated signal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalDetailGet'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
        '404':
          description: Signal not found.
      security:
        - OAuth2:
            - SIG/ALL
  
  /signals/v1/private/signals/{id}/children/:
    parameters:
      - name: id
        in: path
        description: ID of signal whose child signsl are requested
        required: true
        schema:
          type: integer
          example: 1
    get:
      description: Retrieve child signals by parent signal ID.
      responses:
        '200':
          description: Child signals associated with the specified parent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PrivateSignalchildrenGet'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
        '404':
          description: >-
            Parent signal not found or requesting children of a parent signal
            that has no child signals.
      security:
        - OAuth2:
            - SIG/ALL


  /signals/v1/private/signals/{id}/history:
    parameters:
      - name: id
        in: path
        description: ID of signal whose history needs to be retrieved.
        required: true
        schema:
          type: integer
    get:
      description: History of signal instance with specified ID.
      responses:
        '200':
          description: List of history entries for given signal instance.
        '401':
          description: Not authenticated, may be caused by expired token.
        '404':
          description: Signal not found.
      security:
      - OAuth2:
        - SIG/ALL

  /signals/v1/private/signals/{id}/pdf:
    parameters:
      - name: id
        in: path
        description: ID of signal whose PDF is to be downloaded.
        required: true
        schema:
          type: integer
    get:
      description: Download a PDF summarizing this signals.
      responses:
        '200':
          description: PDF downloaded successfully.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden, user not authorized to request signal split.
        '404':
          description: Signal not found.
      security:
      - OAuth2:
        - SIG/ALL

  /signals/v1/private/signals/{id}/split:
    parameters:
      - name: id
        in: path
        description: ID of (parent) signal
        required: true
        schema:
          type: integer
    get:
      description: Get split-off children of this signal.
      responses:
        '200':
          description: >-
            Object with URL references to the original signal en its children.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden, user not authorized to view split signals.
        '404':
          description: Signal not found.
      security:
      - OAuth2:
        - SIG/ALL
    post:
      description: >-
        On a valid post to this endpoint a signal is split. This means its
        status changes to 'split' (GESPLITS) after which it can no longer be
        updated. Simultaneously a number of child signals are created.
      responses:
        '201':
          description: Signal was successful split.
        '412':
          description: >-
            Precondition failed, signal is itself a child or already a parent.
        '400':
          description: >-
            Bad request. Also returned when a split into too many children is
            attempted.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden, user not authorized to request signal split.
        '404':
          description: Signal not found.
      security:
      - OAuth2:
        - SIG/ALL

  /signals/v1/public/signals:
    post:
      description: Create a new Signal/melding.
      requestBody:
        description: Serialized signal data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/V1PublicSignalPost'
      responses:
        '201':
          description: New signal created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PublicSignalDetailGet'
        '400':
          description: Bad request, see response body for the reason.

  /signals/v1/public/signals/{signal_id}:
    get:
      description: Public data about a Signal/melding.
      parameters:
        - name: signal_id
          in: path
          description: Public identifier for a Signal/melding
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Public data about a Signal/melding.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1PublicSignalDetailGet'
        '404':
          description: Signal not found


  /signals/v1/public/terms/categories:
    get:
      description: Categories known to SIA. **May be changed**
      responses:
        '200':
          description: List of all main categories with embedded sub categories.
  /signals/v1/public/terms/categories/{main_slug}:
    get:
      description: >-
        Information about a specific main category and its sub categories.
        **May be changed**
      responses:
        '200':
          description: Detailed information.
      parameters:
        - name: main_slug
          in: path
          description: Slug that identifies the main category.
          required: true
          schema:
            type: string
  /signals/v1/public/terms/categories/{main_slug}/sub_categories/{sub_slug}:
    get:
      description: Information about a specific sub category.  **May be changed**
      responses:
        '200':
          description: Detailed information.
      parameters:
        - name: main_slug
          in: path
          description: Slug that identifies the main category.
          required: true
          schema:
            type: string
        - name: sub_slug
          in: path
          description: Slug that identifies the sub category.
          required: true
          schema:
            type: string
  /signals/user/auth/me:
    get:
      description: Information about the currently authenticated user.
      responses:
        '200':
          description: User information including permissions.
        '401':
          description: Not authenticated, may be caused by expired token.
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/signals/category/removed:
    get:
      description: >-
        Signals that dropped from a certain category are listed here.
        **URL may be changed**
      parameters:
        - name: after
          in: query
          description: Timestamp after which dropped signals are to found.
          schema:
            type: string
        - name: before
          in: query
          description: Timestamp before which dropped signals are to found.
          schema:
            type: string
        - name: category_slug
          in: query
          description: Slug for the category.
          schema:
            type: string
      responses:
        '200':
          description: List of droppen Signal instances.
      security:
      - OAuth2:
        - SIG/ALL

  /signals/v1/private/categories/:
    get:
      description: List of all categories available in the system
      responses:
        '200':
          description: List of all categories available in the system
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateCategoryListResponse'
      security:
        - OAuth2:
          - SIG/ALL
    post:
      description: Creation of categories is not allowed
      responses:
        '405':
          description: Method not allowed
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/categories/{id}:
    parameters:
      - name: id
        in: path
        description: ID of category
        required: true
        schema:
          type: integer
    get:
      description: Retrieves the category matching the given id
      responses:
        '200':
          description: Details of the category matching the given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateCategoryResponse'
        '401':
          description: Not authenticated, may be caused by expired token
        '404':
          description: Category not found
      security:
        - OAuth2:
          - SIG/ALL
    patch:
      description: >-
        Will update the following items on a category
          * name
          * is_active
          * description
          * slo (A new slo will be added to the sla list)
      responses:
        '200':
          description: Changes are made, returns the current state of the category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateCategoryResponse'
        '400':
          description: >-
            Bad request. Also returned when a split into too many children is
            attempted.
        '401':
          description: Not authenticated, may be caused by expired token
        '404':
          description: Category not found
      requestBody:
        description: JSON data to update signal
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/privateCategoryPatch'
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/users/:
    get:
      description: Retrieve list of all users.
      parameters:
        - name: "username"
          in: query
          description: Filter by username, allows partial matches
          schema:
            type: string
          required: false
        - name: "is_active"
          in: query
          description: Filter active (true) and inactive (false).
          schema:
            type: string
        - name: "role"
          in: query
          description: Filter users by role, accepts one or more role names.
          schema:
            type: string
      responses:
        '200':
          description: List of all users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateUserListResponse'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Not authorized to access this endpoint.
      security:
        - OAuth2:
          - SIG/ALL
    post:
      description: Create a new user.
      requestBody:
        description: Serialized new user data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userCreate'
      responses:
        '201':
          description: JSON serialization of detailed newly created SIA user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateUserDetailResponse'
        '400':
          description: Bad request. Posted new user data did not validate.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/users/{id}:
    parameters:
      - name: id
        in: path
        description: ID of user
        required: true
        schema:
          type: integer
    get:
      description: Retrieve user by id.
      responses:
        '200':
          description: JSON serialization of detailed SIA user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/privateUserDetailResponse'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
          - SIG/ALL
    patch:
      description: Partial update of user data.
      responses:
        '200':
          description: User data successfully updated.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/departments/:
    get:
      description: Retrieve list of departments.
      responses:
        '200':
          description: List of departments.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
          - SIG/ALL
    post:
      description: Create a department.
      requestBody:
        description: JSON serialized new department data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/departmentCreate'
      responses:
        '200':
          description: Detailed department data after creation.
        '400':
          description: Bad request.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
      security:
        - OAuth2:
          - SIG/ALL

  /signals/v1/private/departments/{id}:
    parameters:
      - name: id
        in: path
        description: ID of department
        required: true
        schema:
          type: integer
    get:
      description: Retrieve detailed data for a department.
      responses:
        '200':
          description: Detailed department data.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
        '404':
          description: Not Found.
      security:
      - OAuth2:
          - SIG/ALL
    patch:
      description: (Partial) update of department data.
      requestBody:
        description: JSON serialized new department data.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/departmentPatch'
      responses:
        '200':
          description: Detailed department data after successful update.
        '400':
          description: Bad request.
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
        '404':
          description: Not Found.
      security:
      - OAuth2:
          - SIG/ALL

  /signals/v1/private/areas/geography/:
    get:
      description: Retrieve a list of areas in the database. Experimental, the content of the response can still be changed
      parameters:
        - name: "code"
          in: query
          description: >-
            Filter returns only areas with a certain code. Can be used to filter on multiple type
            codes. For example the code for stadsdeel centrum van amsterdam "03630000000018"
          schema:
            type: string
            format: string
          required: false
        - name: "type_code"
          in: query
          description: >-
            Filter returns only areas of a certain type. Can be used to filter on multiple type
            codes. For example a "buurt" or a "stadsdeel" or combination of these codes.
          schema:
            type: string
            format: string
          required: false
      responses:
        '200':
          description: List of area data GEOjson
          headers:
            X-Total-Count:
              schema:
                type: integer
                example: 1
              description: The total areas in the database
            Links:
              schema:
                type: string
                example: <http://127.0.0.1:8000/signals/v1/private/areas/?page=2>; rel="self",<http://127.0.0.1:8000/signals/v1/private/areas/?page=3>; rel="next",<http://127.0.0.1:8000/signals/v1/private/areas/>; rel="prev"
              description: The pagination links for GEOjson list endpoints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AreasGEOJsonList'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
        '404':
          description: Not Found.
      security:
        - OAuth2:
            - SIG/ALL
  /signals/v1/public/areas/geography/:
    get:
      description: Retrieve a list of areas in the database. Experimental, the content of the response can still be changed
      parameters:
        - name: "code"
          in: query
          description: >-
            Filter returns only areas with a certain code. Can be used to filter on multiple type
            codes. For example the code for stadsdeel centrum van amsterdam "03630000000018"
          schema:
            type: string
            format: string
          required: false
        - name: "type_code"
          in: query
          description: >-
            Filter returns only areas of a certain type. Can be used to filter on multiple type
            codes. For example a "buurt" or a "stadsdeel" or combination of these codes.
          schema:
            type: string
            format: string
          required: false
      responses:
        '200':
          description: List of area data GEOjson
          headers:
            X-Total-Count:
              schema:
                type: integer
                example: 1
              description: The total areas in the database
            Links:
              schema:
                type: string
                example: <http://127.0.0.1:8000/signals/v1/private/areas/?page=2>; rel="self",<http://127.0.0.1:8000/signals/v1/private/areas/?page=3>; rel="next",<http://127.0.0.1:8000/signals/v1/private/areas/>; rel="prev"
              description: The pagination links for GEOjson list endpoints
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AreasGEOJsonList'
        '404':
          description: Not Found.
      security:
        - OAuth2:
            - SIG/ALL

  /signals/v1/private/areas/:
    get:
      description: Retrieve a list of areas in the database. Experimental, the content of the response can still be changed
      parameters:
        - name: "code"
          in: query
          description: >-
            Filter returns only areas with a certain code. Can be used to filter on multiple type
            codes. For example the code for stadsdeel centrum van amsterdam "03630000000018"
          schema:
            type: string
            format: string
          required: false
        - name: "type_code"
          in: query
          description: >-
            Filter returns only areas of a certain type. Can be used to filter on multiple type
            codes. For example a "buurt" or a "stadsdeel" or combination of these codes.
          schema:
            type: string
            format: string
          required: false
      responses:
        '200':
          description: List of area data json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AreasJsonList'
        '401':
          description: Not authenticated, may be caused by expired token.
        '403':
          description: Forbidden.
        '404':
          description: Not Found.
      security:
        - OAuth2:
            - SIG/ALL
  /signals/v1/public/areas/:
    get:
      description: Retrieve a list of areas in the database. Experimental, the content of the response can still be changed
      parameters:
        - name: "code"
          in: query
          description: >-
            Filter returns only areas with a certain code. Can be used to filter on multiple type
            codes. For example the code for stadsdeel centrum van amsterdam "03630000000018"
          schema:
            type: string
            format: string
          required: false
        - name: "type_code"
          in: query
          description: >-
            Filter returns only areas of a certain type. Can be used to filter on multiple type
            codes. For example a "buurt" or a "stadsdeel" or combination of these codes.
          schema:
            type: string
            format: string
          required: false
      responses:
        '200':
          description: List of area data json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1AreasJsonList'
        '404':
          description: Not Found.
      security:
        - OAuth2:
            - SIG/ALL
  /signals/v1/public/questions/:
    get:
      description: Retrieve a list of questions in the database. Experimental, the content of the response can still be changed
      parameters:
        - name: main_slug
          in: query
          description: Slug that identifies the main category. Only questions related to the main category is returned if only the main_slug is provided.
          required: true
          schema:
            type: string
        - name: sub_slug
          in: query
          description: Slug that identifies the sub category. Questions are returned for main_slug and sub_slug (sorted on main_slug.order, sub_slug.order)
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of questions data json
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1QuestionsJsonList'
        '404':
          description: Not Found.
  /signals/v1/private/sources/:
    get:
      description: Retrieve a list of signal sources.
      responses:
        '200':
          description: List of signal sources
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/V1SourceList'
        '404':
          description: Not Found.

components:
  schemas:
    StatusStateChoices:
      description: Status string (predefined).
      type: string
      enum:
        - m
        - i
        - b
        - h
        - o
        - a
        - s
        - reopened
        - ingepland
        - ready to send
        - sent
        - send failed
        - done external

    PriorityPriorityChoices:
      type: string
      enum:
        - normal
        - high
        - low

    TypeCodeChoices:
      type: string
      enum:
        - SIG
        - REQ
        - QUE
        - COM
        - MAI

    _NestedLocationRequestData:
      description: JSON Data
      type: object
      properties:
        stadsdeel:
          type: string
        buurt_code:
          type: string
        address:
          type: object
          properties:
            openbare_ruimte:
              type: string
            huisnummer:
              type: number
            huisletter:
              type: string
            huisnummer_toevoeging:
              type: number
            postcode:
              type: string
            woonplaats:
              type: string
        geometrie:
          type: string
          properties:
            'type':
              type: string
              enum:
                - Point
            coordinates:
              type: array
              items:
                type: number
                minItems: 2
                maxItems: 3
          required:
            - coordinates
            - 'type'
        extra_properties:
          type: string

    _NestedLocationResponseData:
      description: JSON Data
      type: object
      properties:
        stadsdeel:
          type: string
          example: "E"
        buurt_code:
          type: string
          example: "E17a"
        address:
          type: object
          properties:
            postcode:
              type: string
              example: "1053KP"
            huisletter:
              type: string
              nullable: true
              example: ""
            huisnummer:
              type: string
              example: "157"
            woonplaats:
              type: string
              example: "Amsterdam"
            openbare_ruimte:
              type: string
              example: "Bilderdijkstraat"
            huisnummer_toevoeging:
              type: string
              example: "3"
        address_text:
          type: string
          example: "Bilderdijkstraat 157-3 1053KP Amsterdam"
        geometrie:
          type: object
          properties:
            'type':
              type: string
              example: "Point"
            coordinates:
              type: array
              items:
                type: number
                minItems: 2
                maxItems: 3
              example: [4.87170696258545, 52.36805320057393]
        extra_properties:
          type: object
          example: {}

    _NestedStatusRequestData:
      description: JSON Data
      type: object
      properties:
        text:
          type: string
        state:
          type: string
          $ref: '#/components/schemas/StatusStateChoices'
        target_api:
          type: string
          enum:
            - sigmax
            - null
        extra_properties:
          type: string

    _NestedStatusResponseData:
      description: JSON Data
      type: object
      properties:
        text:
          type: string
          nullable: true
          example: null
        state:
          type: string
          $ref: '#/components/schemas/StatusStateChoices'
        target_api:
          type: string
          nullable: true
          example: 'sigmax'
        extra_properties:
          type: object
          example: {}
        created_by:
          type: string
          nullable: true
          example: 'test@test.com'
        created_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"

    _NestedCategoryRequestData:
      description: JSON Data
      type: object
      properties:
        sub_category:
          type: string
          format: uri
          example: https://api.data.amsterdam.nl/signals/v1/public/terms/categories/overig/sub_categories/overig
        text:
          type: string
          description: Message to log with category update, will show in logs.

    _NestedCategoryResponseData:
      description: JSON Data
      type: object
      properties:
        sub:
          type: string
          example: "Overlast terrassen"
        sub_slug:
          type: string
          example: "overlast-terrassen"
        main:
          type: string
          example: "Overlast Bedrijven en Horeca"
        main_slug:
          type: string
          example: "overlast-bedrijven-en-horeca"
        category_url:
          type: string
          format: uri
          example: "http://127.0.0.1:8000/signals/v1/public/terms/categories/overlast-bedrijven-en-horeca/sub_categories/overlast-terrassen"
        departments:
          type: string
          example: "VTH"
        created_by:
          type: string
          nullable: true
          example: null
        text:
          type: string
          nullable: true
          example: null

    _NestedReporterRequestData:
      description: JSON Data
      type: object
      properties:
        email:
          type: string
          description: Email address of reporter.
          format: email
        phone:
          type: string
          description: Phone number of reporter.
        sharing_allowed:
          type: boolean
          description: Reporter allows their contact information to be shared (true) or not (false).

    _NestedReporterResponseData:
      description: JSON Data
      type: object
      properties:
        email:
          type: string
          nullable: true
          example: 'test@test.com'
        phone:
          type: string
          nullable: true
          example: ''
        sharing_allowed:
          type: boolean
          description: Reporter allows their contact information to be shared (true) or not (false).
          example: false

    _NestedPriorityRequestData:
      description: JSON Data
      type: object
      properties:
        priority:
          type: string
          $ref: '#/components/schemas/PriorityPriorityChoices'

    _NestedPriorityResponseData:
      description: JSON Data
      type: object
      properties:
        priority:
          type: string
          $ref: '#/components/schemas/PriorityPriorityChoices'
        created_by:
          type: string
          nullable: true
          example: 'test@test.com'

    _NestedNoteRequestData:
      description: JSON Data
      type: object
      properties:
        text:
          type: string

    _NestedNoteResponseData:
      description: JSON Data
      type: object
      properties:
        text:
          type: string

    _NestedTypeRequestData:
      description: JSON Data
      type: object
      properties:
        code:
          type: string
          $ref: '#/components/schemas/TypeCodeChoices'

    _NestedTypeResponseData:
      description: JSON Data
      type: object
      properties:
        code:
          type: string
          $ref: '#/components/schemas/TypeCodeChoices'
          example: 'SIG'
        created_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        created_by:
          type: string
          nullable: true
          example: 'test@test.com'

    _NestedDirectingDepartmentResponseData:
      description: JSON Data of a directing department, can only be set on a parent Signal
      type: object
      properties:
        id:
          type: integer
          example: 1
        code:
          type: string
          example: 'ASC'
        name:
          type: string
          example: 'Actie service centrum'
        is_intern:
          type: boolean
          example: false

    V1PrivateSignalPost:
      description: JSON data for creation of Signal/melding (private version).
      type: object
      properties:
        source:
          type: string
        text:
          type: string
          description: The complaint
        text_extra:
          type: string
          nullable: true
        location:
          $ref: '#/components/schemas/_NestedLocationRequestData'
        category:
          $ref: '#/components/schemas/_NestedCategoryRequestData'
        priority:
          $ref: '#/components/schemas/_NestedPriorityRequestData'
        'type':
          $ref: '#/components/schemas/_NestedTypeRequestData'
        incident_date_start:
          type: string
          format: date-time
        incident_date_end:
          type: string
          format: date-time
          nullable: true
        operational_date:
          type: string
          format: date-time
          nullable: true
        extra_properties:
          type: object
          example: {}
      required:
        - text
        - location
        - incident_date_start

    V1PublicSignalPost:
      description: JSON data for creation of Signal/melding (public version).
      type: object
      properties:
        text:
          type: string
          description: The complaint
          example: Er ligt vuilnis op straat.
        text_extra:
          type: string
          nullable: true
        location:
          $ref: '#/components/schemas/_NestedLocationRequestData'
        category:
          $ref: '#/components/schemas/_NestedCategoryRequestData'
        reporter:
          $ref: '#/components/schemas/_NestedReporterRequestData'
        incident_date_start:
          description: Start of nuisance or problem.
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        incident_date_end:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
          nullable: true
        extra_properties:
          type: array
          items:
            type: object
          example: []
      required:
        - text
        - location
        - incident_date_start

    V1PrivateSignalPatch:
      type: object
      properties:
        location:
          $ref: '#/components/schemas/_NestedLocationRequestData'
        status:
          $ref: '#/components/schemas/_NestedStatusRequestData'
        category:
          $ref: '#/components/schemas/_NestedCategoryRequestData'
        priority:
          $ref: '#/components/schemas/_NestedPriorityRequestData'
        'type':
          $ref: '#/components/schemas/_NestedTypeRequestData'
        extra_properties:
          type: object
          example: {}

    V1PrivateSignalListGet:
      description: JSON serialization of paginated list of signals
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
                  format: uri
                  example: http://127.0.0.1:8000/signals/v1/private/signals/
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page
                  format: uri
                  nullable: true
                  example: http://127.0.0.1:8000/signals/v1/private/signals/?page=2
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page
                  format: uri
                  nullable: true
                  example: null
        count:
          type: integer
          description: Total count of results for the request
          example: 10
        results:
          type: array
          description: A list of signals, paginated
          items:
            $ref: '#/components/schemas/V1PrivateSignalDetailList'

    V1PrivateSignalDetailList:
      description: Detailed JSON serialization of SIA Signals/meldingen.
      type: object
      properties:
        _links:
          type: object
          properties:
            _link:
              description: HAL JSON links
              type: object
              properties:
                self:
                  type: object
                  properties:
                    href:
                      description: URI of this user in API
                      type: string
                      format: uri
                      example: "http://127.0.0.1:8000/signals/v1/private/signals/1"
        _display:
          description: Textual representation of signal for display purposes.
          type: string
          example: 1 - m - E17a - 2020-01-01 00:00:00.000000+00:00
        category:
          $ref: '#/components/schemas/_NestedCategoryResponseData'
        id:
          description: ID of the signal
          type: integer
          example: 1
        has_attachments:
          type: boolean
          example: false
        location:
          $ref: '#/components/schemas/_NestedLocationResponseData'
        status:
          $ref: '#/components/schemas/_NestedStatusResponseData'
        reporter:
          $ref: '#/components/schemas/_NestedReporterResponseData'
        priority:
          $ref: '#/components/schemas/_NestedPriorityResponseData'
        'type':
          $ref: '#/components/schemas/_NestedTypeResponseData'
        directing_departments:
          type: array
          items:
            $ref: '#/components/schemas/_NestedDirectingDepartmentResponseData'
        source:
          type: string
          example: Telefoon – ASC
        text:
          type: string
          example: Het cafe op de hoek maakt enorme herrie
        text_extra:
          type: string
          nullable: true
          example: null
        created_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        updated_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        incident_date_start:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        incident_date_end:
          type: string
          format: date-time
          nullable: true
          example: null

    V1PrivateSignalListGetGeography:
      description: Geography
      type: object
      properties:
        'type':
          type: string
          example: "FeatureCollection"
        features:
          type: array
          items:
            type: object
            properties:
              'type':
                type: string
                example: "Feature"
              geometry:
                type: object
                properties:
                  'type':
                    type: string
                    example: "Point"
                  coordinates:
                    type: array
                    items:
                      type: integer
                    minItems: 0
                    maxItems: 2
                    example: [4.890986949631043, 52.41875227274259]
              'properties':
                type: object
                properties:
                  id:
                    description: The ID of the Signal
                    type: integer
                    example: 1
                  created_at:
                    type: string
                    format: date-time
                    example: "2020-01-01T00:00:00+00:00"

    V1PrivateSignalDetailGet:
      description: Detailed JSON serialization of a SIA Signal/melding.
      type: object
      properties:
        _links:
          type: object
          properties:
            curies:
              type: object
              properties:
                name:
                  type: string
                  description: The compact URI (curie) named 'sia'
                  example: 'sia'
                href:
                  type: string
                  example: "http://127.0.0.1:8000/signals/v1/relations"
            _link:
              description: HAL JSON links
              type: object
              properties:
                self:
                  type: object
                  properties:
                    href:
                      description: URI of this user in API
                      type: string
                      format: uri
                      example: "http://127.0.0.1:8000/signals/v1/private/signals/1"
            archives:
              type: object
              properties:
                href:
                  type: string
                  format: uri
                  example: "http://127.0.0.1:8000/signals/v1/private/signals/4669/history"
            sia:attachments:
              type: object
              properties:
                href:
                  type: string
                  format: uri
                  example: "http://127.0.0.1:8000/signals/v1/private/signals/4669/attachments"
            sia:pdf:
              type: object
              properties:
                href:
                  type: string
                  format: uri
                  example: "http://127.0.0.1:8000/signals/v1/private/signals/4669/pdf"
        _display:
          description: Textual representation of signal for display purposes.
          type: string
          example: 1 - m - E17a - 2020-01-01 00:00:00.000000+00:00
        category:
          $ref: '#/components/schemas/_NestedCategoryResponseData'
        id:
          description: ID of the signal
          type: integer
          example: 1
        has_attachments:
          type: boolean
          example: false
        location:
          $ref: '#/components/schemas/_NestedLocationResponseData'
        status:
          $ref: '#/components/schemas/_NestedStatusResponseData'
        reporter:
          $ref: '#/components/schemas/_NestedReporterResponseData'
        priority:
          $ref: '#/components/schemas/_NestedPriorityResponseData'
        'type':
          $ref: '#/components/schemas/_NestedTypeResponseData'
        source:
          type: string
          example: Telefoon – ASC
        text:
          type: string
          example: Het cafe op de hoek maakt enorme herrie
        text_extra:
          type: string
          nullable: true
          example: null
        created_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        updated_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        incident_date_start:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        incident_date_end:
          type: string
          format: date-time
          nullable: true
          example: null

    V1PublicSignalDetailGet:
      description: Detailed JSON serialization of a SIA Signal.
      type: object
      properties:
        _display:
          description: Textual representation of signal for display purposes.
          type: string
          example: SIA-123
        signal_id:
          description: Public identifier for SIA signal, use on public detail endpoint.
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        updated_at:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        incident_date_start:
          type: string
          format: date-time
          example: "2020-01-01T00:00:00+00:00"
        incident_date_end:
          type: string
          format: date-time
          nullable: true
          example: null
        status:
          description: Filtered status of Signal.
          type: object
          properties:
            state:
              description: Public state code either "OPEN" or "CLOSED".
              type: string
            state_display:
              description: Public state display text.
              type: string

    userCreate:
      description: JSON data for user creation
      type: object
      properties:
        username:
          description: Username in SIA, will be shown in interface.
          type: string
          format: email
        first_name:
          type: string
        last_name:
          type: string
        is_active:
          description: User is active (true) or inactive (false), the default is true
          type: boolean
        role_ids:
          type: array
          items:
            description: ID of role
            type: integer
        profile:
          description: User profile.
          type: object
          properties:
            department_ids:
              type: array
              items:
                description: ID of department to which the new user belongs.
                type: integer
            note:
              description: Note on this new user.
              type: string
      required:
        - username

    userPatch:
      description: JSON data for user update
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        is_active:
          description: User is active (true) or inactive (false)
          type: boolean
        role_ids:
          type: array
          items:
            description: ID of role
            type: integer
        profile:
          description: User profile.
          type: object
          properties:
            department_ids:
              type: array
              items:
                description: ID of department to which the new user belongs.
                type: integer
            note:
              description: Note on this new user.
              type: string

    privateCategoryResponse:
      description: JSON data describing the category response
      type: object
      properties:
        _links:
          type: object
          properties:
            curies:
              type: object
              properties:
                name:
                  type: string
                  description: The compact URI (curie) named 'sia'
                href:
                  type: string
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the private category
                public:
                  type: string
                  description: URI to the public category
            sia:status-message-templates:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the status message templates of the category
            sia:parent:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the private parent category parent
                public:
                  type: string
                  description: URI to the public parent category detail
        _display:
          type: string
          description: The display value of the category
        id:
          type: integer
          description: The id of the category
        name:
          type: string
          description: The name of the category
        slug:
          type: string
          description: The (generated) slug of the category
        is_active:
          type: boolean
          description: If the current category is still active
        description:
          type: string
          description: Description of the category
        handling_message:
          type: string
          description: Handling message of the category (this is also mailed to the reporter)
        sla:
          type: object
          properties:
            n_days:
              type: integer
              description: Number of days describing the SLA time
            use_calendar_days:
              type: boolean
              description: If the n_days is in calendar days (true) or working days (false)
        departments:
          type: array
          description: A readonly list of departments for the selected category
          items:
            type: object
            properties:
              id:
                description: ID of the department
                type: integer
              code:
                description: The code of the department
                type: string
              name:
                description: The name of the department
                type: string
              is_intern:
                description: Department is internal or external
                type: boolean
              is_responsible:
                description: >-
                  The department being created is responsible for given category
                  as identified by the `category_id` (true) or not (false).
                  Defaults to false.
                type: boolean
              can_view:
                description: >-
                  The department being created can view given category as
                  identified by the `category_id` (true) or not (false).
                  Defaults to false.
                type: boolean

    privateCategoryListResponse:
      description: JSON data describing the category response
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the list endpoint
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the next page of the list endpoint (if not available this is null)
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI to the previous page of the list endpoint (if not available this is null)
        count:
          type: integer
          description: Total count of results for the request
        results:
          type: array
          description: A list of categories, paginated
          items:
            type: object
            $ref: '#/components/schemas/privateCategoryResponse'

    privateCategoryPatch:
      description: JSON data for category updates
      type: object
      properties:
        name:
          type: string
          description: The name of the category
        description:
          type: string
          description: Description of the category
        is_active:
          type: boolean
          description: If the current category is still active
        new_sla:
          type: object
          description: This will add a new sla to the category
          properties:
            n_days:
              type: integer
              description: Number of days describing the SLA time
            use_calendar_days:
              type: boolean
              description: If the n_days is in calendar days (true) or working days (false)
        handling_message:
          type: string
          description: The handling message, used in the e-mail to the reporter

    departmentCreate:
      description: JSON data for new department
      type: object
      properties:
        name:
          type: string
          description: Name of department
        code:
          type: string
          description: Three letter code of department
        is_intern:
          type: boolean
          description: TBD, defaults to false.
        categories:
          type: array
          items:
            type: object
            properties:
              category_id:
                description: ID of category
                type: integer
              is_responsible:
                description: >-
                  The department being created is responsible for given category
                  as identified by the `category_id` (true) or not (false).
                  Defaults to false.
                type: boolean
              can_view:
                description: >-
                  The department being created can view given category as
                  identified by the `category_id` (true) or not (false).
                  Defaults to false.
                type: boolean
            required:
              - category_id
      required:
        - name
        - code

    departmentPatch:
      description: JSON data for partial update to department.
      type: object
      properties:
        name:
          type: string
          description: Name of department
        code:
          type: string
          description: Three letter code of department
        is_intern:
          type: boolean
          description: TBD, defaults to false.
        categories:
          type: array
          items:
            type: object
            properties:
              category_id:
                description: ID of category
                type: integer
              is_responsible:
                description: >-
                  The department being created is responsible for given category
                  as identified by the `category_id` (true) or not (false).
                  Defaults to false.
                type: boolean
              can_view:
                description: >-
                  The department being created can view given category as
                  identified by the `category_id` (true) or not (false).
                  Defaults to false.
                type: boolean

    privateUserListResponse:
      description: JSON serialization of paginated list of SIA users.
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page in SIA users list (null) if not available
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page in SIA users list (null) if not available
        count:
          type: integer
          description: Total count of results for the request
        results:
          type: array
          description: A list of categories, paginated
          items:
            $ref: '#/components/schemas/privateNestedUserResponse'

    privateNestedUserResponse:
      description: JSON serialization of a SIA user.
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  description: Hyperlink to detailed data of this user.
                  type: string
              required:
                - href
          required:
            - self
        _display:
          description: Textual representation of user for display purposes.
          type: string
        id:
          description: ID of user
          type: integer
        username:
          description: Username
          type: string
          format: email
        is_active:
          description: User is active (true) or inactive (false)
          type: boolean
        roles:
          description: List of roles for this user.
          type: array
          items:
            description: Name of role.
            type: string
        profile:
          $ref: '#/components/schemas/privateNestedProfileResponse'

    privateNestedProfileResponse:
      description: JSON serialization of a SIA user profile
      type: object
      properties:
        note:
          description: Note field associated with a SIA user.
          type: string
        departments:
          description: List of departments associated with a SIA user.
          type: array
          items:
            description: Name of department
            type: string
        created_at:
          description: Timestamp of user profile creation
          type: string
          format: date-time
        updated_at:
          description: Timestamp of last user profile update
          type: string
          format: date-time

    privateUserDetailResponse:
      description: Detailed JSON serialization of a SIA user.
      type: object
      properties:
        _link:
          description: HAL JSON links
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  description: URI of this user in API
                  type: string
                  format: uri
        _display:
          description: Textual representation of user for display purposes.
          type: string
        id:
          description: ID of user
          type: integer
        username:
          description: Username (must be an email address for SIA).
          type: string
          format: email
        email:
          description: Email of user, matches username.
          type: string
          format: email
        first_name:
          description: First name of SIA user.
          type: string
        last_name:
          description: Last name of SIA user.
          type: string
        is_active:
          description: User is active (true) or inactive (false)
          type: boolean
        is_staff:
          description: >-
            SIA is build using the Django web framework. This framework has a
            built-in admin interface for maintenance, users that have the
            is_staff flag set to true are allowed access to this admin
            interface. In SIA the admin is purely for technical purposes,
            day-to-day user management can be achieved through the API and
            associated frontend.
          type: boolean
        is_superuser:
          description: >-
            User has superuser privileges that trump all permission checks
            (true) or has normal user user privileges (false).
          type: boolean
        roles:
          description: List of roles associated with the SIA user.
          type: array
          items:
            $ref: '#/components/schemas/privateNestedRoleResponse'
        permissions:
          description: List of permissions assigned directly to user (not via roles).
          type: array
          items:
            $ref: '#/components/schemas/privateNestedPermissionResponse'
        profile:
           $ref: '#/components/schemas/privateNestedProfileResponse'

    V1PrivateSignalchildrenGet:
      description: >-
        Child signals associated with a specific parent Signal. If the
        requesting user has access to the parent signal and not the child
        signals, they will still be visible in this endpoint in an
        abridged representation.
      type: object
      properties:
        _links:
          description: HAL JSON links
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  description: URI of these child signals in API
                  type: string
                  format: uri
        count:
          description: Number of child signals associated with parent signal.
          type: integer
        results:
          description: List of child signals
          type: array
          items:
            type: object
            properties:
              _links:
                description: HAL JSON links
                type: object
                properties:
                  self:
                    type: object
                    properties:
                      href:
                        description: URI of this child signal
                        type: string
                        format: uri
              id:
                description: child signal ID
                type: integer
              status:
                description: child signal status
                type: object
                properties:
                  state:
                    type: string
                    description: status "state" code
                  state_display:
                    type: string
                    description: display name of status
              category:
                description: Main and sub category of child signal
                type: object
                properties:
                  sub:
                    type: string
                    description: sub category name
                  sub_slug:
                    type: string
                    description: sub category slug
                  departments:
                    type: string
                    description: department codes associated with sub category
                  main:
                    type: string
                    description: main category name
                  main_slug:
                    type: string
                    description: main category slug

    privateNestedRoleResponse:
      description: A SIA role
      type: object
      properties:
        _link:
          description: HAL JSON links
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  description: URI of this role in API
                  type: string
                  format: uri
        _display:
          description: Textual representation of role for display purposes.
          type: string
        id:
          description: ID of this role
          type: integer
        name:
          description: Name of this role
          type: string
        permissions:
          description: List of permissions associated with this role
          type: array
          items:
            $ref: '#/components/schemas/privateNestedPermissionResponse'

    privateNestedPermissionResponse:
      description: SIA permission
      type: object
      properties:
        _link:
          description: HAL JSON links
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  description: URI of this permission in API
                  type: string
                  format: uri
        _display:
          description: Textual representation of permission for display purposes.
          type: string
        id:
          description: ID of this permission
          type: integer
        name:
          description: Name of this permission
          type: string
        codename:
          description: Codename (technical) of this permission
          type: string

    V1AreasGEOJsonList:
      description: EXPERIMENTAL - Area GEOjson list
      type: object
      properties:
        'type':
          type: string
          example: "FeatureCollection"
        features:
          type: array
          items:
            items:
              $ref: '#/components/schemas/V1AreaGEOJson'

    V1AreaGEOJson:
      description: EXPERIMENTAL - Area GEOjson
      type: object
      properties:
        'type':
          type: string
          example: "Feature"
        geometry:
          type: object
          properties:
            'type':
              type: string
              example: "MultiPolygon"
            coordinates:
              type: array
              items:
                type: integer
              minItems: 0
              maxItems: 2
              example: [[[[0.0, 0.0], [0.0, 1.0], [1.0, 1.0], [0.0, 0.0]]], [[[1.0, 1.0], [1.0, 2.0], [2.0, 2.0], [1.0, 1.0]]]]
        'properties':
          type: object
          properties:
            name:
              description: The Name of the Area
              type: string
              example: Amsterdam
            'type':
              type: object
              properties:
                name:
                  description: The Name of the Area type
                  type: string
                  example: Gebied
                code:
                  description: The code of the Area type
                  type: string
                  example: gebied

    V1AreasJsonList:
      description: EXPERIMENTAL - Area GEOjson list
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
                  format: uri
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page
                  format: uri
                  nullable: true
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page
                  format: uri
                  nullable: true
                  example: null
        count:
          type: integer
          description: Total count of results for the request
          example: 1
        results:
          type: array
          description: A list of signals, paginated
          items:
            $ref: '#/components/schemas/V1AreaJson'

    V1AreaJson:
      description: EXPERIMENTAL - Area GEOjson
      type: object
      properties:
        name:
          description: The Name of the Area
          type: string
          example: Gebied
        code:
          description: The code of the Area
          type: string
          example: gebied
        'type':
          type: object
          properties:
            name:
              description: The Name of the Area type
              type: string
              example: Gebied
            code:
              description: The code of the Area type
              type: string
              example: gebied
        bbox:
          type: array
          items:
            type: integer
          example: [4.804035, 52.306854, 4.87683, 52.352063]

    V1QuestionsJsonList:
      description: EXPERIMENTAL - Questions json list
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
                  format: uri
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page
                  format: uri
                  nullable: true
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page
                  format: uri
                  nullable: true
                  example: null
        count:
          type: integer
          description: Total count of results for the request
          example: 1
        results:
          type: array
          description: A list of signals, paginated
          items:
            $ref: '#/components/schemas/V1QuestionJson'

    V1QuestionJson:
      description: EXPERIMENTAL - Question json
      type: object
      properties:
        key:
          description: The question key
          type: string
          example: extra_bedrijven_horeca_personen
        field_type:
          description: The code of the Area
          type: string
          enum:
            - 'PlainText'
            - 'TextInput'
            - 'MultiTextInput'
            - 'CheckboxInput'
            - 'RadioInput'
            - 'SelectInput'
            - 'TextareaInput'
            - 'MapSelect'
          example: CheckboxInput
        meta:
          type: object

    V1SourceList:
      description: List of sources
      type: object
      properties:
        _links:
          type: object
          properties:
            self:
              type: object
              properties:
                href:
                  type: string
                  description: URI of current page
                  format: uri
            next:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the next page
                  format: uri
                  nullable: true
            previous:
              type: object
              properties:
                href:
                  type: string
                  description: URI of the previous page
                  format: uri
                  nullable: true
                  example: null
        count:
          type: integer
          description: Total count of results for the request
          example: 1
        results:
          type: array
          description: A list of signals, paginated
          items:
            $ref: '#/components/schemas/V1Source'

    V1Source:
      description: Possible signal source
      type: object
      properties:
        id:
          description: ID of source
          type: integer
          example: 1
        name:
          description: Name of source
          type: string
          example: Eigen organisatie
        description:
          description: Description of source
          type: string
          example: Binnengekomen via de eigen organisatie
  securitySchemes:
    OAuth2:
      description: SIA API is using OAuth2 implicit grant flow.
      type: oauth2
      flows:
        implicit:
          authorizationUrl: '/oauth2/authorize'
          scopes:
            SIG/ALL: General access to SIA Django application.
