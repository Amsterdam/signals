from _typeshed import Incomplete
from django.contrib.auth.backends import ModelBackend
from mozilla_django_oidc.utils import absolutify as absolutify, import_from_settings as import_from_settings

LOGGER: Incomplete

def default_username_algo(email): ...

class OIDCAuthenticationBackend(ModelBackend):
    OIDC_OP_TOKEN_ENDPOINT: Incomplete
    OIDC_OP_USER_ENDPOINT: Incomplete
    OIDC_OP_JWKS_ENDPOINT: Incomplete
    OIDC_RP_CLIENT_ID: Incomplete
    OIDC_RP_CLIENT_SECRET: Incomplete
    OIDC_RP_SIGN_ALGO: Incomplete
    OIDC_RP_IDP_SIGN_KEY: Incomplete
    UserModel: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def get_settings(attr, *args): ...
    def describe_user_by_claims(self, claims): ...
    def filter_users_by_claims(self, claims): ...
    def verify_claims(self, claims): ...
    def create_user(self, claims): ...
    def get_username(self, claims): ...
    def update_user(self, user, claims): ...
    def retrieve_matching_jwk(self, token): ...
    def get_payload_data(self, token, key): ...
    def verify_token(self, token, **kwargs): ...
    def get_token(self, payload): ...
    def get_userinfo(self, access_token, id_token, payload): ...
    request: Incomplete
    def authenticate(self, request, **kwargs): ...
    def store_tokens(self, access_token, id_token) -> None: ...
    def get_or_create_user(self, access_token, id_token, payload): ...
    def get_user(self, user_id): ...
